Title: All Tags
---
@using FluentBootstrap;

@{    
    // This replicates the old ToLookup() extension - obsolete with new extensions
    IDictionary<IDocument, IEnumerable<string>> documentValues = Documents
        .Distinct()
        .Select(x =>
        {
            IEnumerable<string> values;
            return new KeyValuePair<IDocument, IEnumerable<string>>(x, x.MetadataAs<IEnumerable<string>>().TryGetValue("Tags", out values) ? values : null);
        })
        .Where(x => x.Value != null)
        .ToDictionary(x => x.Key, x => x.Value);
    var DocumentsByTag = documentValues
        .SelectMany(x => x.Value)
        .Distinct()
        .SelectMany(x => documentValues.Where(
            y => y.Value.Contains(x)).Select(y => new KeyValuePair<string, IDocument>(x, y.Key)))
        .ToLookup(x => x.Key, x => x.Value);

	string Tag = Model.Get<string>("Tag", null);
}

@using (Bs.Div().AddCss("container-sm-height").Begin())
{
    using (var row = Bs.GridRow().AddCss("row-sm-height").Begin())
    {
        if (Tag != null)
        {
            using (row.GridColumn().SetSm(8).AddCss("right-border", "col-sm-height").Begin())
            {            
                ViewData["PostListDocuments"] = DocumentsByTag[Tag]
                    .OrderByDescending(x => x.Get<DateTime>("Published"));
                @Html.Partial("_PostList");
                <hr class="@Css.VisibleXsBlock" />
            }
        }
		
        using (row.GridColumn().SetSm(Tag == null ? 12 : 4).AddCss("col-sm-height").Begin())
        {
            foreach (var tagDocuments in DocumentsByTag.OrderBy(x => x.Key))
            {
                var tagButton = Html.TagButton(tagDocuments.Key, tagDocuments.Count(), tagDocuments.Key == Tag ? ButtonState.Primary : ButtonState.Default);
                if(Tag != null)
                {
                    tagButton.SetSize(ButtonSize.Xs);
                }
                @tagButton
            }
        }
    }
}