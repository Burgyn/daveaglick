[{"Title":"XQuery Function To Get The Number Of Week/Work Days","Lead":null,"Published":"2010-06-17T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["XML","XQuery","networkdays","weekdays"],"ViewTypeName":"xquery_function_to_get_the_number_of_week_work_days","Rendered":"\r\n\r\n<p>Today's post is an XQuery function designed to get a count of the number of week (or work) days between two dates. It's designed to mimic the Excel <code>NETWORKDAYS</code> function. I got the algorithm from Bernal Schooley in this <a href=\"http://www.eggheadcafe.com/community/aspnet/2/44982/how-to-calculate-num-of-w.aspx\">thread</a> and then adapted it to XQuery. It also makes use of the <a href=\"http://www.xqueryfunctions.com/\">FunctX</a> <code><a href=\"http://www.xqueryfunctions.com/xq/functx_day-of-week.html\">day-of-week</a></code> function, so if you have FunctX functions already referenced you can take that part out.</p>\r\n\r\n<pre><code>declare namespace functx = \"http://www.functx.com\";\r\n\r\ndeclare function functx:day-of-week\r\n ($date as xs:anyAtomicType?) as xs:integer? {\r\n if (empty($date))\r\n then ()\r\n else\r\n  xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7\r\n};\r\n\r\ndeclare function local:weekdays\r\n ($start as xs:anyAtomicType?, $end as xs:anyAtomicType?) as xs:integer? {\r\n if(empty($start) or empty($end))\r\n then()\r\n else\r\n  if($start > $end)\r\n  then -local:weekdays($end, $start)\r\n  else\r\n   let $dayOfWeekStart := functx:day-of-week($start)\r\n   let $dayOfWeekEnd := functx:day-of-week($end)\r\n   let $adjDayOfWeekStart := if($dayOfWeekStart = 0) then 7 else $dayOfWeekStart\r\n   let $adjDayOfWeekEnd := if($dayOfWeekEnd = 0) then 7 else $dayOfWeekEnd\r\n   return\r\n    if($adjDayOfWeekStart <= $adjDayOfWeekEnd)\r\n    then xs:integer((xs:integer(days-from-duration(xs:date($end) - xs:date($start)) div 7) * 5)\r\n     + max(((min((($adjDayOfWeekEnd + 1), 6)) - $adjDayOfWeekStart), 0)))\r\n    else xs:integer((xs:integer(days-from-duration(xs:date($end) - xs:date($start)) div 7) * 5)\r\n     + min((($adjDayOfWeekEnd + 6) - min(($adjDayOfWeekStart, 6)), 5)))\r\n};</code></pre>\r\n<p>Usage: <code>local:weekdays('2009-06-01', '2010-06-30')</code></p>\r\n"},{"Title":"Using ASP.NET MVC and Razor To Generate PDF Files","Lead":null,"Published":"2014-05-09T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["ASPNET","ASPNET MVC","export","PDF","Acrobat"],"ViewTypeName":"using_aspnet_mvc_and_razor_to_generate_pdf_files","Rendered":"\r\n\r\n<p>From reports to scan sheets, the need to generate PDF files has been present in every line-of-business application I’ve ever worked on. In the past, I’ve used a variety of tools to achieve this such as <a href=\"http://en.wikipedia.org/wiki/SQL_Server_Reporting_Services\">SQL Server Reporting Services</a> or <a href=\"http://www.telerik.com/products/reporting.aspx\">Telerik Reporting</a>. While these kinds of tools work well enough for generating reports straight from the database, it’s been surprising how few resources exist to aid in generating PDF files from arbitrary data.</p>\r\n\r\n<p>It turns out there is a pretty simple way to enable the generation of PDF files in an ASP.NET MVC application using the same Razor view engine that you’re probably already using. This allows you to make use of view models, HTML helpers, etc. in your PDF logic. The code here is based primarily on the code in MVC itself, specifically the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.actionresult(v=vs.118).aspx\">ActionResult</a></code> and <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.viewresult(v=vs.118).aspx\">ViewResult</a></code> classes. It’s also based on general concepts used in two open source projects, <a href=\"https://github.com/andyhutch77/MvcRazorToPdf\">MvcRazorToPdf</a> and <a href=\"https://github.com/RazorAnt/RazorPDF\">RazorPDF</a>. In a nutshell, the commands necessary to create a given PDF file (typically as XML) are placed in a standard .cshtml view, rendered and interpreted as any Razor view would be, passed to a PDF generation library (I use the excellent <a href=\"http://www.aspose.com/.net/pdf-component.aspx\">Aspose.Pdf</a>, but this approach can also work with <a href=\"http://sourceforge.net/projects/itextsharp/\">iTextSharp</a> or any other PDF generation library that takes markup such as XML), and then returned to the client as PDF content. This is what the process looks like in a nutshell:</p>\r\n\r\n\r\n<img class=\"img-responsive\" src=\"/Content/posts/pdf-process.png\"></img>\r\n\r\n<h1>The PdfResult Class</h1>\r\n\r\n<p>The <code>PdfResult</code> class is the heart of this approach. It contains all of the logic necessary to locate the view, set up the view context, render the view, and generate the PDF file. Though it does all the heavy lifting, there actually isn’t that much code involved:</p>\r\n\r\n<pre><code class=\"language-csharp\">public class PdfResult : PartialViewResult\r\n{\r\n    // Setting a FileDownloadName downloads the PDF instead of viewing it\r\n    public string FileDownloadName { get; set; }\r\n\r\n    public override void ExecuteResult(ControllerContext context)\r\n    {\r\n        if (context == null)\r\n        {\r\n            throw new ArgumentNullException(\"context\");\r\n        }\r\n\r\n        // Set the model and data\r\n        context.Controller.ViewData.Model = Model;\r\n        ViewData = context.Controller.ViewData;\r\n        TempData = context.Controller.TempData;\r\n\r\n\r\n        // Get the view name\r\n        if (string.IsNullOrEmpty(ViewName))\r\n        {\r\n            ViewName = context.RouteData.GetRequiredString(\"action\");\r\n        }\r\n\r\n        // Get the view\r\n        ViewEngineResult viewEngineResult = null;\r\n        if (View == null)\r\n        {\r\n            viewEngineResult = FindView(context);\r\n            View = viewEngineResult.View;\r\n        }\r\n\r\n        // Render the view\r\n        StringBuilder sb = new StringBuilder();\r\n        using (TextWriter tr = new StringWriter(sb))\r\n        {\r\n            ViewContext viewContext = new ViewContext(context, View, ViewData, TempData, tr);\r\n            View.Render(viewContext, tr);\r\n        }\r\n        if (viewEngineResult != null)\r\n        {\r\n            viewEngineResult.ViewEngine.ReleaseView(context, View);\r\n        }\r\n\r\n        // Create a PDF from the rendered view content\r\n        Aspose.Pdf.Generator.Pdf pdf = new Aspose.Pdf.Generator.Pdf();\r\n        using (MemoryStream ms = new MemoryStream(Encoding.UTF8.GetBytes(sb.ToString())))\r\n        {\r\n            pdf.BindXML(ms, null);\r\n        }\r\n\r\n        // Save the PDF to the response stream\r\n        using(MemoryStream ms = new MemoryStream())\r\n        {\r\n            pdf.Save(ms);\r\n            FileContentResult result = new FileContentResult(ms.ToArray(), \"application/pdf\")\r\n            {\r\n                FileDownloadName = FileDownloadName\r\n            };\r\n            result.ExecuteResult(context);\r\n        }\r\n    }\r\n}</code></pre>\r\n\r\n<p>Let’s go through this from top to bottom.</p>\r\n\r\n<p>First off, it’s derived from <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.partialviewresult(v=vs.118).aspx\">PartialViewResult</a></code>. Why <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.partialviewresult(v=vs.118).aspx\">PartialViewResult</a></code> and not <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.viewresult(v=vs.118).aspx\">ViewResult</a></code> or <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.actionresult(v=vs.118).aspx\">ActionResult</a></code>? <code>ViewResult</code> has a more robust implementation of <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.viewresult.findview(v=vs.118).aspx\">FindView()</a></code> that looks in several places for the view and includes the convention-based view search logic we’re used to using with normal views. It also includes built-in support for managing the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.viewresultbase.viewdata(v=vs.118).aspx\">ViewData</a></code> for a view. So why use <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.partialviewresult(v=vs.118).aspx\">PartialViewResult</a></code>? The reason is that <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.partialviewresult(v=vs.118).aspx\">PartialViewResult</a></code> never attempts to render layouts as part of the view. This is important if you’re using a global layout via a <a href=\"http://weblogs.asp.net/scottgu/archive/2010/10/22/asp-net-mvc-3-layouts.aspx\">_ViewStart.cshtml</a> file or something similar. Since our PDF file obviously shouldn’t have the same layout logic as one of our actual web pages, we need to make sure that doesn’t get included in the rendered PDF syntax. The easiest way to do that is to derive our <code>PdfResult</code> class from <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.partialviewresult(v=vs.118).aspx\">PartialViewResult</a></code>, which ensures a layout is not used by returning a slightly different <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.viewengineresult(v=vs.118).aspx\">ViewEngineResult</a></code> (and thus <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.iview(v=vs.118).aspx\">IView</a></code>) in it’s own <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.partialviewresult.findview(v=vs.118).aspx\">FindView()</a></code> implementation.</p>\r\n\r\n<p>Looking at the body, the only method is an override of <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.actionresult.executeresult(v=vs.118).aspx\">ExecuteResult()</a></code>. This method is called when the <code>PdfResult</code> (or any <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.actionresult(v=vs.118).aspx\">ActionResult</a></code>) is processed by MVC and is intended to manipulate the result sent to the client (by adding content, setting headers, etc.). The first thing we do is check to make sure we have a context. This block, and most of the rest of the first part of the method, is copied straight from the implementation in MVC. Next we set the model (if there is one) and the other data that will be passed to the view. This is necessary to make sure that when we interpret our view code we have access to all of the same kinds of data we would have if this were just a normal web view. Then we get the name of the view from the action name if a view name wasn’t already provided. We set this in the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.viewresultbase.viewname(v=vs.118).aspx\">ViewName</a></code> member which <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.partialviewresult.findview(v=vs.118).aspx\">FindView()</a></code> uses to locate the view.</p>\r\n\r\n<p>This is where things get a little bit interesting. Next we call <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.partialviewresult.findview(v=vs.118).aspx\">FindView()</a></code> which locates the actual view .cshtml file using MVC conventions and instantiates an <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.iview(v=vs.118).aspx\">IView</a></code> for us that can be used for rendering the view. We then create a <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.viewcontext(v=vs.118).aspx\">ViewContext</a></code> to hold all of the data our view might need and call the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.iview.render(v=vs.118).aspx\">Render()</a></code> method of the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.iview(v=vs.118).aspx\">IView</a></code> we were previously provided. This triggers the Razor view engine and is where the view magically gets transformed into content we can pass to our PDF generation library.</p>\r\n\r\n<p>Once we have the content to pass to the PDF generator library, we create the PDF file. The code above is written for <a href=\"http://www.aspose.com/.net/pdf-component.aspx\">Aspose.Pdf</a>, but could be adapted to work with <a href=\"http://sourceforge.net/projects/itextsharp/\">iTextSharp</a> like this (from <a href=\"https://github.com/andyhutch77/MvcRazorToPdf\">MvcRazorToPdf</a>):</p>\r\n\r\n<pre><code class=\"language-csharp\">// Create a PDF from the rendered view content\r\nvar workStream = new MemoryStream();\r\nvar document = new Document();\r\nPdfWriter writer = PdfWriter.GetInstance(document, workStream);\r\nwriter.CloseStream = false;\r\ndocument.Open();\r\nStream stream = new MemoryStream(Encoding.UTF8.GetBytes(sb.ToString()));\r\nXMLWorkerHelper.GetInstance().ParseXHtml(writer, document, stream, null);\r\ndocument.Close();\r\n\r\n// Save the PDF to the response stream\r\nFileContentResult result = new FileContentResult(workStream.ToArray(), \"application/pdf\")\r\n{\r\n    FileDownloadName = FileDownloadName\r\n};\r\n</code></pre>\r\n\r\n<p>One final note about the <code>FileDownloadName</code> property and it’s use in the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.filecontentresult(v=vs.118).aspx\">FileContentResult</a></code>. If <code>null</code> is supplied for <code>FileDownloadName</code>, the PDF file will be delivered to the browser and rendered inline. However, if a value is supplied for <code>FileDownloadName</code>, the browser will initiate a file download of a PDF file with that name. This lets you control the way in which the client views and downloads the PDF file.</p>\r\n\r\n<h1>The Controller</h1>\r\n\r\n<p>Now that we have the <code>PdfResult</code> class complete, how do we use it to actually generate a PDF file? This step is optional, but I prefer to add a method to my <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.controller(v=vs.118).aspx\">Controller</a></code> base class to support alternate view results from an action. <a href=\"http://msdn.microsoft.com/en-us/library/dd460331(v=vs.118).aspx\">The base <code>Controller</code> in MVC already does this</a> – you typically write <code>return View();</code> not <code>return new ViewResult() { ... };</code> If you don’t already have a custom base <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.controller(v=vs.118).aspx\">Controller</a></code> in your MVC application, I suggest adding one. Even if it’s just to hold the next bit of code, it’s worthwhile. And I’ve found over time that it’s nice having a base <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.controller(v=vs.118).aspx\">Controller</a></code> class into which I can add all sorts of other helper methods and additional logic. To that end, the following are overloads for a <code>Pdf()</code> method that can be used as the return value for an action:</p>\r\n\r\n<pre><code class=\"language-csharp\">protected ActionResult Pdf()\r\n{\r\n    return Pdf(null, null, null);\r\n}\r\n\r\nprotected ActionResult Pdf(string fileDownloadName)\r\n{\r\n    return Pdf(fileDownloadName, null, null);\r\n}\r\n\r\nprotected ActionResult Pdf(string fileDownloadName, string viewName)\r\n{\r\n    return Pdf(fileDownloadName, viewName, null);\r\n}\r\n\r\nprotected ActionResult Pdf(object model)\r\n{\r\n    return Pdf(null, null, model);\r\n}\r\n\r\nprotected ActionResult Pdf(string fileDownloadName, object model)\r\n{\r\n    return Pdf(fileDownloadName, null, model);\r\n}\r\n\r\nprotected ActionResult Pdf(string fileDownloadName, string viewName, object model)\r\n{\r\n    // Based on View() code in Controller base class from MVC\r\n    if (model != null)\r\n    {\r\n        ViewData.Model = model;\r\n    }\r\n    PdfResult pdf = new PdfResult()\r\n    {\r\n        FileDownloadName = fileDownloadName,\r\n        ViewName = viewName,\r\n        ViewData = ViewData,\r\n        TempData = TempData,\r\n        ViewEngineCollection = ViewEngineCollection\r\n    };\r\n    return pdf;\r\n}</code></pre>\r\n\r\n<h1>The Action</h1>\r\n\r\n<p>The result of all this is that you can write you PDF generating actions in a very similar way to how you write your normal web actions:</p>\r\n\r\n<pre><code class=\"language-csharp\">public virtual ActionResult PdfTest()\r\n{\r\n\r\n    return Pdf(new int[] { 1, 2, 3 });\r\n\r\n}\r\n</code></pre>\r\n\r\n<p>The code about will cause a <code>PdfResult</code> class to be instantiated which will attempt to find a view named “PdfTest.cshtml” in the conventional location. It will be given an <code>int[]</code> array as it’s model and then rendered by the Razor view engine.</p>\r\n\r\n<h1>The View</h1>\r\n\r\n<p>The final step is the view, where the actual PDF content is specified. Recall that I said I’m using <a href=\"http://www.aspose.com/.net/pdf-component.aspx\">Aspose.Pdf</a>, so the XML in my view corresponds to the XML that <a href=\"http://www.aspose.com/.net/pdf-component.aspx\">Aspose.Pdf</a> expects. If you’re using <a href=\"http://sourceforge.net/projects/itextsharp/\">iTextSharp</a> or any other PDF generation library then the XML (or other type of) content contained in your view may look drastically different. But for the sake of example, here’s what a sample view might look like using the <a href=\"http://www.aspose.com/.net/pdf-component.aspx\">Aspose.Pdf</a> XML format:</p>\r\n\r\n<pre><code class=\"language-csharp\">@model IEnumerable&lt;int&gt;\r\n\r\n&lt;Pdf xmlns=&quot;Aspose.Pdf&quot; DestinationType=&quot;FitPage&quot;&gt;\r\n    &lt;Section&gt;\r\n        @foreach (int c in Model)\r\n        {\r\n            @:&lt;Text Alignment=&quot;Center&quot;&gt;&lt;Segment&gt;@c&lt;/Segment&gt;&lt;/Text&gt;       \r\n        }\r\n    &lt;/Section&gt;\r\n&lt;/Pdf&gt;</code></pre>\r\n\r\n<p>The Razor syntax checker in Visual Studio will probably complain that all these XML elements are not valid HTML5 (or whatever other validation type you have configured), but that’s fine – the actual view engine will deal with them without issue. One small complication you’ll see above is that the <a href=\"http://www.aspose.com/.net/pdf-component.aspx\">Aspose.Pdf</a> XML specification uses an element called <code>Text</code>. <a href=\"http://weblogs.asp.net/scottgu/archive/2010/12/15/asp-net-mvc-3-razor-s-and-lt-text-gt-syntax.aspx\">Unfortunately, this element also has a very special meaning in Razor syntax</a>. We need to escape it when used directly inside a code block by using <code>@:</code>.</p>\r\n\r\n<h1>Conclusion</h1>\r\n\r\n<p>That about covers it. This was a pretty long article, mainly because I wanted to explain how everything fit together. Hopefully you’ll see that when you get right down to it the approach is actually pretty simple. Now go forth and populate your web apps with lots of useful PDF documents.</p>"},{"Title":"Strongly Typed Icon Fonts in ASP.NET MVC","Lead":null,"Published":"2014-01-02T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["ASPNET","ASPNET MVC","HtmlHelper","CSS","icon fonts","icons"],"ViewTypeName":"strongly_typed_icon_fonts_in_aspnet_mvc","Rendered":"\r\n\r\n<p>This a technique for working with icon fonts, which have been steadily gaining in popularity. I love icon fonts. They allow me to package up a whole bunch of simple glyphs and pictograms, use them on my site or application without too much fuss on nearly every browser, and let me control presentation attributes such as color, size, etc. I especially like the recent trend of web-based tools for building custom icon fonts from an available library of glyphs (I tend to use <a href=\"http://fontastic.me\">Fontastic</a>, but I've also had good luck with <a href=\"http://icomoon.io\">IcoMoon</a> and <a href=\"http://flaticon.com\">FlatIcon</a>).</p>\r\n\r\n<p>Most icon fonts, including those from the services mentioned above, provide a CSS file with styles you can use to insert specific icons from the font using a friendly name. Most of these style sheets either use an HTML5 <code>data-</code> declaration and/or a CSS class with a <code>:before</code> selector to insert the requested character in the appropriate font face before the target element. For example, the top of the CSS file I get with the font I use from Fontastic looks like:</p>\r\n\r\n<pre><code class=\"language-css\">@charset \"UTF-8\";\r\n\r\n@font-face {\r\n  font-family: \"back-office\";\r\n  src:url(\"fonts/back-office.eot\");\r\n  src:url(\"fonts/back-office.eot?#iefix\") format(\"embedded-opentype\"),\r\n    url(\"fonts/back-office.woff\") format(\"woff\"),\r\n    url(\"fonts/back-office.ttf\") format(\"truetype\"),\r\n    url(\"fonts/back-office.svg#back-office\") format(\"svg\");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n\r\n[data-icon]:before {\r\n  font-family: \"back-office\" !important;\r\n  content: attr(data-icon);\r\n  font-style: normal !important;\r\n  font-weight: normal !important;\r\n  font-variant: normal !important;\r\n  text-transform: none !important;\r\n  speak: none;\r\n  line-height: 1;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n[class^=\"icon-\"]:before,\r\n[class*=\" icon-\"]:before {\r\n  font-family: \"back-office\" !important;\r\n  font-style: normal !important;\r\n  font-weight: normal !important;\r\n  font-variant: normal !important;\r\n  text-transform: none !important;\r\n  speak: none;\r\n  line-height: 1;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n.icon-address-book:before {\r\n  content: \"a\";\r\n}\r\n.icon-alert:before {\r\n  content: \"b\";\r\n}</code></pre>\r\n\r\n<p>Ignore the <code>@font-face</code> declaration and the two blocks after it (the first sets up common styles when using a <code>data-icon</code> attribute and the second sets up common styles for <code>icon-</code> classes). The important thing is the last part of the file that declares the CSS classes <code>icon-address-book</code> and <code>icon-alert</code>. You typically use these in your HTML (or Razor) as:</p>\r\n\r\n<pre><code class=\"language-markup\">&lt;span&gt;\r\n    &lt;i class=\"icon-alert\"&gt;&lt;/i&gt; Oh, no! There's an alert icon preceding this text!\r\n&lt;/span&gt;</code></pre>\r\n\r\n<p>This requires that you use the name of the CSS class directly in your view. That is a \"<a href=\"http://en.wikipedia.org/wiki/Magic_number_(programming)\">magic string</a>\", and I <strong>hate</strong> magic strings. What if you refactor the icon font to remove a particular icon (or worse yet, one of your team members commits a new icon font without particular icons – it's happened to me)? What if you want to automatically find all of the uses of a particular icon? What if you want to pass around or store an icon without resorting to strings? All of these can be solved by using something other than a string literal to represent a particular icon.</p>\r\n\r\n<p>The first step is figuring out what we're going to use instead. I like enums for this purpose because they're strongly-typed and not interchangeable. But there's one small problem: if I want to refer to my icons with a friendly name, I still have to store the CSS class name somewhere. Unfortunately in C# enums can't have string values. A workaround is to store the CSS class names as a <code><a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.descriptionattribute(v=vs.110).aspx\">System.ComponentModel.DescriptionAttribute</a></code>. Then we can just use the following extension method to get the value of the <code>DescriptionAttribute</code> whenever we need it (just put in any static class):</p>\r\n\r\n<pre><code class=\"language-csharp\">public static string GetDescription(this Enum value)\r\n{\r\n    FieldInfo fieldInfo = value.GetType().GetField(value.ToString());\r\n    DescriptionAttribute description = fieldInfo.GetCustomAttribute(false);\r\n    return description == null ? value.ToString() : description.Description;\r\n}</code></pre>\r\n\r\n<p>I use this technique a lot outside this particular font icon problem and it works very well for attaching string values to an enum member. This lets us create an enum type that looks like this:</p>\r\n\r\n<pre><code class=\"language-csharp\">public enum Icon\r\n{\r\n    [Description(\"icon-address-book\")]\r\n    AddressBook,\r\n    [Description(\"icon-alert\")]\r\n    Alert\r\n}</code></pre>\r\n\r\n<p>Then, if we create a couple of <a href=\"http://www.asp.net/mvc/tutorials/older-versions/views/creating-custom-html-helpers-cs\">HTML helpers</a> (these can just go in any static class):</p>\r\n\r\n<pre><code class=\"language-csharp\">public static MvcHtmlString Icon(this HtmlHelper helper, Icon icon)\r\n{\r\n    return MvcHtmlString.Create(icon.Html());\r\n}\r\n\r\n// Not really an HTML helper, but included here anyway\r\npublic static string Html(this Icon icon)\r\n{\r\n    if (icon == Util.Icon.None) return string.Empty;\r\n    return string.Format(\"&lt;i class='{0}'&gt;&lt;/i&gt; \", icon.GetDescription());\r\n}</code></pre>\r\n\r\n<p>We can write the following in our view (this assumes Razor, but the technique should work in any view engine that exposes the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.htmlhelper(v=vs.118).aspx\">HtmlHelper</a></code> class and supports extension methods):</p>\r\n\r\n<pre><code class=\"language-markup\">&lt;span&gt;\r\n    @Html.Icon(Icon.Alert) Oh, no! There's an alert icon preceding this text!\r\n&lt;/span&gt;</code></pre>\r\n\r\n<p>This successfully eliminated our magic string. But we still have to create the <code>Icon</code> enum and manually match it to the CSS from the icon font. Luckily, there is an easy way to create the enum automatically using T4 templates. Generally I like to limit the number of T4 templates I have in my projects. They eat up time in the build cycle and can get out of sync with the current build causing some hard to diagnose and often frustrating bugs. But in cases like this, T4 is perfect. Just drop the following into your project and name it \"Icons.tt\".</p>\r\n\r\n<pre><code class=\"language-csharp\">&lt;#@ template language=\"C#\" hostSpecific=\"true\" #&gt;\r\n&lt;#@ assembly name=\"System.Core\" #&gt; \r\n&lt;#@ import namespace=\"System.Linq\" #&gt;\r\n&lt;#@ import namespace=\"System.Collections.Generic\" #&gt;\r\n&lt;#@ import namespace=\"System.Text.RegularExpressions\" #&gt;\r\n&lt;# Process(); #&gt;\r\n&lt;#+\r\n    readonly Regex regex = new Regex(@\"^\\.icon-(.*)\\:before \\{$\", RegexOptions.Compiled | RegexOptions.Multiline);\r\n\r\n    public void Process()\r\n    {\r\n        WriteLine(\"using System.ComponentModel;\");\r\n        WriteLine(\"\");\r\n        WriteLine(\"namespace Sipc.BackOffice.Util\");\r\n        WriteLine(\"{\");\r\n        WriteLine(\"\\tpublic enum Icon\");\r\n        WriteLine(\"\\t{\");\r\n        string css = System.IO.File.ReadAllText(Host.ResolvePath(\"..\\\\Content\\\\icons\\\\styles.css\"));\r\n        foreach (Match match in regex.Matches(css))\r\n        {\r\n            WriteLine(\"\\t\\t[Description(\\\"icon-\" + match.Groups[1].Value + \"\\\")]\");\r\n            WriteLine(\"\\t\\t\" + String.Join(null, match.Groups[1].Value.Split(new char[]{'-'}, StringSplitOptions.RemoveEmptyEntries)\r\n                .Select(x =&gt; (char.IsDigit(x[0]) ? (\"_\" + x[0]) : char.ToUpper(x[0]).ToString()) + x.Substring(1))) + \",\");            \r\n        }\r\n        WriteLine(\"\\t\\t[Description(\\\"\\\")]\");\r\n        WriteLine(\"\\t\\tNone\");\r\n        WriteLine(\"\\t}\");\r\n        WriteLine(\"}\");\r\n    }\r\n#&gt;</code></pre>\r\n\r\n<p>You'll need to adjust the path to the CSS file so it matches your project. You may also need to tweak the regular expression and/or the string processing (which basically just tries to strip the <code>icon-</code> part of the CSS class, remove the hyphens, and title case the rest). However, this should give you enough to start with. Once it's in the project and you rebuild, you'll get a C# source file with an <code>Icon</code> enum that has values and corresponding <code>DescriptionAttributes</code> for every class in the CSS. Then when you go to update or change your icon font, just drop the new CSS file on top of the old one and rerun the T4 template (or rebuild the project).</p>"},{"Title":"Round Robin Row Selection From SQL Server","Lead":null,"Published":"2013-05-17T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["SQL","SQL Server","round robin"],"ViewTypeName":"round_robin_row_selection_from_sql_server","Rendered":"\r\n\r\n<p>I've been trying to answer at least one question a day on Stack Overflow recently, and <a href=\"http://stackoverflow.com/questions/16595598/how-to-maintain-a-round-robin-approach\">one came up yesterday</a> that I thought was a pretty good little SQL problem: how can you efficiently select one row from a database in a \"round robin\" fashion? That is, how can you make sure the selections are evenly distributed? Turns out this can be accomplished with a single SQL query on SQL 2005 and newer using the <code><a href=\"http://msdn.microsoft.com/en-us/library/ms177564(v=sql.90).aspx\">OUTPUT</a></code> clause. Assuming the table has an \"Id\" primary key and a \"LastSelected\" DateTime column, the following SQL query will select the record that hasn't been selected in the longest time (or pick an arbitrary one if there is a tie), update the last time that record was selected, and then return all columns for the record.</p>\r\n\r\n<pre><code class=\"language-sql\">UPDATE MyTable\r\nSET LastSelected = GetDate()\r\nOUTPUT INSERTED.*\r\nWHERE Id = (SELECT TOP (1) Id FROM MyTable ORDER BY LastSelected)</code></pre>\r\n"},{"Title":"Right-Click Context Menus In GtkSharp","Lead":null,"Published":"2010-04-12T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Mono","GtkSharp","ButtonPressEvent","Context Menu","ContextMenuHelper","Menu","Popup","Popup Menu"],"ViewTypeName":"right_click_context_menus_in_gtksharp","Rendered":"\r\n\r\n<p>To show a context menu in GtkSharp (or \"popup\" as they're called in Gtk land), you would normally add an event handler for Widget.PopupMenu, create or use a Menu instance, and then call Menu.Popup. The only problem is that for many widgets, the right-click doesn't trigger the Widget.PopupMenu event. This is fine for systems where there is no right mouse button or where a right-click isn't the customary way of initiating context menus. However, on systems where there is a user expectation that the way to open a context menu is through a right-click (such as Windows), we need some way to trigger one.</p>\r\n<p>The situation is complicated a little bit by the existing behavior of Widget.PopupMenu. According to the <a href=\"http://library.gnome.org/devel/gtk/unstable/gtk-migrating-checklist.html#checklist-popup-menu\">Gtk manual</a>, \"By default, the key binding mechanism is set to emit this signal when the Shift+F10 or Menu keys are pressed while a widget has the focus.\" There is a recommendation in the manual that if a developer wants context menus on right-click they should handle the Widget.ButtonPressEvent, listen for the appropriate clicks, and launch the menu using the Menu.Popup method. This is all fine except that now you've got two things to listen to to get proper context menu handling: Widget.PopupMenu and Widget.ButtonPressEvent. It would be nice if there were just one event to handle that got raised anytime a context menu needed to be displayed.</p>\r\n<p>The following class does just that. You can \"attach\" it to any Widget and it will listen for the Widget.PopupMenu event to work with the default context menu handling and the Widget.ButtonPressEvent to also work with right-clicks. When either of these occur, it will first propagate the event through to the underlying Widget (in case there are other things that are supposed to be triggered by whatever event caused the context menu) and then raise a ContextMenuHelper.ContextMenu event that you can handle and use to display the context menu regardless of what triggered it. This method should ensure proper event handling and ordering while reducing duplication of code by enabling a single event for context menu handling.</p>\r\n\r\n<pre><code class=\"language-csharp\">using System;\r\nusing Gdk;\r\nusing GLib;\r\nusing Gtk;\r\n\r\nnamespace Somedave\r\n{\r\n public class ContextMenuEventArgs : EventArgs\r\n {\r\n  private Widget widget;\r\n  public Widget Widget { get { return widget; } }\r\n\r\n  private bool rightClick;\r\n  public bool RightClick { get { return rightClick; } }\r\n\r\n  public ContextMenuEventArgs(Widget widget, bool rightClick)\r\n  {\r\n   this.widget = widget;\r\n   this.rightClick = rightClick;\r\n  }\r\n }\r\n\r\n public class ContextMenuHelper\r\n {\r\n  public event EventHandler&lt;ContextMenuEventArgs&gt; ContextMenu;\r\n\r\n  public ContextMenuHelper()\r\n  {}\r\n\r\n  public ContextMenuHelper(Widget widget)\r\n  {\r\n   AttachToWidget(widget);\r\n  }\r\n\r\n  public ContextMenuHelper(Widget widget, EventHandler handler)\r\n  {\r\n   AttachToWidget(widget);\r\n   ContextMenu += handler;\r\n  }\r\n\r\n  public void AttachToWidget(Widget widget)\r\n  {\r\n   widget.PopupMenu += Widget_PopupMenu;\r\n   widget.ButtonPressEvent += Widget_ButtonPressEvent;\r\n  }\r\n\r\n  public void DetachFromWidget(Widget widget)\r\n  {\r\n   widget.PopupMenu -= Widget_PopupMenu;\r\n   widget.ButtonPressEvent -= Widget_ButtonPressEvent;\r\n  }\r\n\r\n  [GLib.ConnectBefore]\r\n  private void Widget_PopupMenu(object o, PopupMenuArgs args)\r\n  {\r\n   RaiseContextMenuEvent(args, (Widget)o, false);\r\n  }\r\n\r\n  [GLib.ConnectBefore]\r\n  private void Widget_ButtonPressEvent(object o, ButtonPressEventArgs args)\r\n  {\r\n   if (args.Event.Button == 3 &amp;&amp; args.Event.Type == EventType.ButtonPress)\r\n   {\r\n    RaiseContextMenuEvent(args, (Widget)o, true);\r\n   }\r\n  }\r\n\r\n  private bool propagating = false;   //Prevent reentry\r\n\r\n  private void RaiseContextMenuEvent(SignalArgs signalArgs, Widget widget, bool rightClick)\r\n  {\r\n   if (!propagating)\r\n   {\r\n    //Propagate the event\r\n    Event evnt = Gtk.Global.CurrentEvent;\r\n    propagating = true;\r\n    Gtk.Global.PropagateEvent(widget, evnt);\r\n    propagating = false;\r\n    signalArgs.RetVal = true;     //The widget already processed the event in the propagation\r\n\r\n    //Raise the context menu event\r\n    ContextMenuEventArgs args = new ContextMenuEventArgs(widget, rightClick);\r\n    if (ContextMenu != null)\r\n    {\r\n     ContextMenu.Invoke(this, args);\r\n    }\r\n   }\r\n  }\r\n }\r\n}\r\n</code></pre>"},{"Title":"Quick and Dirty Multiple Value Dictionary Using Extension Methods","Lead":null,"Published":"2013-05-16T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["DotNet","CSharp","Dictionary","MultiDictionary"],"ViewTypeName":"quick_and_dirty_multiple_value_dictionary_using_extension_methods","Rendered":"\r\n\r\n<p>Though it's not a collection I tend to reach for often, there have been times when I really need a multiple value dictionary (that is, a dictionary that contains more than one value per key). In the past, I've usually reached for the excellent <a href=\"http://powercollections.codeplex.com/\">PowerCollections</a> library to fill the gap. However, that requires bringing in another library and it can be a little heavy-weight for just this one collection class. There are also a ton of other implementations out there. But perhaps there's a better way to fill this need, one that doesn't require a lot of extra code. These two extension methods do most of the work of a multiple value dictionary, but don't require any extra classes or libraries:</p>\r\n\r\n<pre><code class=\"language-csharp\">public static void AddMulti&lt;TKey, TCollection, TValue&gt;(\r\n    this IDictionary&lt;TKey, TCollection&gt; dictionary, TKey key, TValue value)\r\n    where TCollection : ICollection&lt;TValue&gt;, new()\r\n{\r\n    TCollection collection;\r\n    if (!dictionary.TryGetValue(key, out collection))\r\n    {\r\n        collection = new TCollection();\r\n        dictionary.Add(key, collection);\r\n    }\r\n    collection.Add(value);\r\n}\r\n\r\npublic static bool ContainsMultiValue&lt;TKey, TCollection, TValue&gt;(\r\n    this IDictionary&lt;TKey, TCollection&gt; dictionary, TKey key, TValue value)\r\n    where TCollection : ICollection&lt;TValue&gt;, new()\r\n{\r\n    TCollection collection;\r\n    return dictionary.TryGetValue(key, out collection) &amp;&amp; collection.Contains(value);\r\n}</code></pre>\r\n\r\n<p>The extensions apply to any IDictionary&lt;TKey, TCollection&gt; where TCollection implements ICollection&lt;TValue&gt;. The idea is that you bring your own dictionary with an arbitrary collection for values and the extension manages adding a new collection when the key doesn't exist and adding a value to the collection for a given key. The nice this is that by varying the type of collection you can get different behavior. Use a <code>List&lt;TValue&gt;</code> when you want duplicate values to be allowed and a <code>HashSet&lt;TValue&gt;</code> when you don't. Here's an example:</p>\r\n\r\n<pre><code class=\"language-csharp\">Dictionary&lt;string, List&lt;int&gt;&gt; duplicateValuesDictionary\r\n  = new Dictionary&lt;string, List&lt;int&gt;&gt;();\r\nduplicateValuesDictionary.AddMulti(\"foo\", 1);\r\nduplicateValuesDictionary.AddMulti(\"foo\", 1);\r\nduplicateValuesDictionary.AddMulti(\"foo\", 2);\r\nduplicateValuesDictionary.ContainsMultiValue(1);  // True\r\nduplicateValuesDictionary[\"foo\"].Contains(1);     // True\r\nduplicateValuesDictionary.ContainsMultiValue(3);  // False\r\n\r\nDictionary&lt;string, HashSet&lt;int&gt;&gt; uniqueValuesDictionary\r\n  = new Dictionary&lt;string, HashSet&lt;int&gt;&gt;();\r\nuniqueValuesDictionary.AddMulti(\"foo\", 1);\r\nuniqueValuesDictionary.AddMulti(\"foo\", 1);  // This is throw an exception</code></pre>\r\n\r\n<p>Obviously this approach won't work in all cases. For example, you don't have a lot of control over the comparer or construction logic that the inner <code>ICollection&lt;TValue&gt;</code> uses since it gets constructed using the general <code>new()</code> statement. But in general, this can be a good lightweight way to add multiple value dictionary support without the overhead of an additional library.</p>\r\n"},{"Title":"Object Persistence In Nxdb","Lead":null,"Published":"2012-03-26T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Nxdb","XML","database","persistence","object persistence"],"ViewTypeName":"object_persistence_in_nxdb","Rendered":"\r\n\r\n<p>The most recent version of Nxdb includes a complete object persistence framework and this post explains some of the motivation behind it and provides some insight into how it was implemented.</p>\r\n\r\n<h1>What Is A Persistence Framework?</h1>\r\n\r\n<p><a href=\"http://en.wikipedia.org/wiki/Persistence_framework\">Wikipedia</a> sums it up nicely by saying \"a persistence framework is middleware that assists and automates the storage of program data into databases.\" More to the point, a persistence framework allows the state of object instances to be stored externally (usually, but not necessarily, in a database) and recalled at a later time (such as a future program execution). The \"state\" of an object could be everything that is necessary to fully represent the object (such as all of it's fields), or it could be some important subset of object data.</p>\r\n\r\n<p>Persistence frameworks are related to, but not the same, as object-relational mapper (ORM) tools. A persistence framework usually manages the conversion of an object to some format the external storage medium can understand, the storage of that data into the external medium, the fetching of data from the external medium, and the instantiation and population of instances based on that data. The problem with persistence frameworks when they use a relational database (or other highly structured storage) is that the database needs to know something about the objects being stored so that tables, columns, etc. can be created to support them. ORM tools assist with this process by mapping the data to be stored (I.e., the object) to the storage medium (I.e., the database). They often automate the process of creating appropriate tables and columns, managing foreign keys, etc. An ORM is only needed when the storage medium cannot natively support the type or structure of data needing to be stored.</p>\r\n\r\n<h1>Why Create A New Persistence Framework?</h1>\r\n\r\n<p>In general, I wouldn't really recommend rolling your own persistence framework. There are so many good ones out there (including <a href=\"http://nhforge.org\">NHibernate</a>, <a href=\"http://subsonicproject.com/\">SubSonic</a>, and <a href=\"http://www.mybatis.org/\">mybatis</a>) and it is doubtful you'll be able to improve on them enough to make the exercise worthwhile. So why ignore this advice and build a new one for Nxdb? The answer is that almost all of the existing persistence framework are based on SQL, talk to SQL databases, and either use or have built-in ORM capabilities. XML is a completely different storage medium, one that is able to better represent the hierarchical nature of object-oriented classes. While a couple of .NET XML persistence frameworks do exist (such as <a href=\"http://proetus.codeplex.com/\">Proetus</a>) and several articles have been written at <a href=\"http://www.codeproject.com/search.aspx?q=.net+xml+persistence&amp;sbo=kw\">CodeProject</a> and elsewhere on how to write XML persistence capabilities, they tend to be somewhat conceptual and abstract the storage layer by producing XML that becomes the developer's responsibility to store and retrieve. We saw an opportunity to unlock the potential of a native XML persistence layer by having it be tied directly to an XML database. This allows automation of the storage and retrieval of objects and opens up the door for interesting use cases such as querying the object graph using XQuery.</p>\r\n\r\n<h1>Requirements</h1>\r\n\r\n<p>When we started thinking about an XML persistence layer for Nxdb we considered what the most important requirements should be and narrowed them down to a few key ones:</p>\r\n\r\n\r\n<ul class=\"p\">\r\n <li>The framework should be able to serialize objects in a variety of ways to support many different environments and uses.</li>\r\n <li>The framework should automate the process of storing and fetching objects as much as possible.</li>\r\n <li>The framework should require as small a change as possible to existing objects to make them compatible.</li>\r\n <li>The framework should be extensible, allowing developers to modify or enhance any aspect of the design.</li>\r\n</ul>\r\n<h1>Overall Design</h1>\r\n\r\n<p>The main entry point for the persistence framework is the Manager class. All objects are initially persisted or retrieved through one of it's methods. Objects can be <em>attached</em> to the manager, which means that they are stored in a cache and the manager will return a reference to the same instance of the object if the same XML content is used. Additionally, attached objects can be automatically updated when the database changes, making the objects more of a programmatic representation of the database rather than the database simply serving as a backing store. Each object is persisted to and from the database using a Persister. The persister is primarily responsible for determining what parts of an object should be stored in the database, how those parts should be represented (for example as XML elements or attributes), and performing the actual serialization and deserialization of an object. There are several persisters including one that supports the native .NET XmlSerializer, one that provides a great deal of control through the use of attributes on class members, and one that allows completely custom behavior through the implementation of an interface. Should additional techniques be required, a new persister is easy to create and implement. Overall, the architecture and process by which objects are stored to the database and fetched from the database is presented below.</p>\r\n\r\n\r\n<img class=\"img-responsive\" src=\"/Content/posts/persistenceprocess1.png\"></img>\r\n"},{"Title":"Nested Grabs In GtkSharp","Lead":null,"Published":"2010-04-15T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Mono","GtkSharp"],"ViewTypeName":"nested_grabs_in_gtksharp","Rendered":"\r\n\r\n<p>I ran across this while working on some complex GtkSharp grabbing behavior to mimic window focusing for a docking framework. Turns out there is a weird inconsistency in the way Gtk+ manages the grab stack. While the list of grabbed Widgets is indeed a stack, a flag on each Widget (<code>Widget.HasGrab</code>) is used to check if a Widget has the grab or not. The problem is that <code>Grab.Add</code> (which calls the Gtk+ method <code><a href=\"http://library.gnome.org/devel/gtk/stable/gtk-General.html#gtk-grab-add\">gtk_grab_add</a></code>) never clears the flag for the currently grabbed Widget if you're nesting grabs. That means that <em>every Widget in the grab stack</em> will have <code>Widget.HasGrab</code> set to true. If you try to add a Widget to the grab stack and it's already in the stack (even if there are multiple other grabbed Widgets after it in the stack), it won't get added. Because the flag is set though, it <em>will</em> get removed at the first place it was in the stack on a call to <code>Grab.Remove</code> (<code><a href=\"http://library.gnome.org/devel/gtk/stable/gtk-General.html#gtk-grab-remove\">gtk_grab_remove</a></code>).</p>\r\n\r\n<p>While it may not be a bug, this is certainly odd behavior. The solution (at least for me) was to write two small utility methods. <code>SafeAdd</code> first removes the <code>Widget.HasGrab</code> flag to ensure that the Widget always gets added to the grab stack, regardless of if it's previously in it. <code>SafeAdd</code> should be paired with <code>SafeRemove</code> which checks the newly grabbed Widget after removing one to make sure it still has the <code>Widget.HasGrab</code> flag set. Note that it doesn't clear the <code>Widget.HasGrab</code> flag for grabbed Widget getting replaced by a new grabbed Widget on the grab stack as you might expect. This maintains compatibility with all the other Gtk code that might be expecting Widgets anywhere in the stack to have the flag set.</p>\r\n\r\n<pre><code class=\"language-csharp\">public static void SafeAdd(Widget widget)\r\n{\r\n if (widget == null)\r\n {\r\n  throw new ArgumentNullException(\"widget\");\r\n }\r\n if (widget.Sensitive)\r\n {\r\n  widget.ClearFlag(WidgetFlags.HasGrab);\r\n  Grab.Add(widget);\r\n }\r\n}\r\n\r\npublic static void SafeRemove(Widget widget)\r\n{\r\n if (widget == null)\r\n {\r\n  throw new ArgumentNullException(\"widget\");\r\n }\r\n Grab.Remove(widget);\r\n Widget current = Grab.Current;\r\n if( current != null && !current.HasGrab )\r\n {\r\n  current.SetFlag(WidgetFlags.HasGrab);\r\n }\r\n}</code></pre>\r\n"},{"Title":"My New Blog","Lead":"Look, Ma, no database!","Published":"2014-09-05T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["blog","meta"],"ViewTypeName":"my_new_blog","Rendered":"\r\n\r\n<p>It's been a little while coming, but I'm finally launching my new blog. It's built from scratch in ASP.NET MVC. Why go to all the trouble to build a blog engine from scratch when there are a gazillion great engines already out there? That's a very good question, let me break it down for you.</p>\r\n\r\n<h1>Own Your Content</h1>\r\n<p>I'll thank Scott Hanselman <a href=\"http://www.hanselman.com/blog/YourWordsAreWasted.aspx\">for really driving this point home</a>. There's a lot to be said for owning your entire infrastructure from code to database to content. I've blogged on other platforms like WordPress and TypePad, but I generally become dissatisfied when I want to customize things. Want to tweak the CSS? That'll be an extra fee. Want to add your Twitter feed? That'll be an extra add-on to buy or install. How about some ads? Of course we'll serve ads, and we'll keep the revenue too. Etc.</p>\r\n<p>Now this doesn't necessarily mean that you should go out and roll an entire blog engine. In many cases it's enough just to get a domain, install one of the many excellent blog engines that are out there, and use that. At least you'll own the stack and you won't be riding on someone else's infrastructure.</p>\r\n\r\n<h1>A Learning Exercise</h1>\r\n<p>Remember the days when a blog was just a bunch of static HTML pages hosted on GeoCities? Nowadays social sites need to implement a variety of features and protocols to be relevant. Comments (including moderation), RSS feeds, social links, etc. all go in to making a modern blog. I was curious how all of this worked under the hood, so I decided to put my head down and figure it out the best way there is - by doing. Which also means that this blog is built for me. It's not riding on a generic blogging platform and there are probably many ways that I've architected things that wouldn't work for other blogs. That said, I'd love it if some of what I've build could be re-used.</p>\r\n\r\n<h1>Open Source</h1>\r\n<p>I was originally <a href=\"http://haacked.com/archive/2013/12/02/dr-jekyll-and-mr-haack/\">inspired by Phil Haack to open source my blog</a>. Since then I've seen several other people do this and I love the idea. It lets the blogging community learn from the collective ideas of all the other bloggers out there. See a feature on a blog that you think is cool? Just hop over to the repository and see how it works. To that end, <strong><a href=\"https://github.com/somedave/Somedave\">this blog is available on GitHub</a></strong>. Clone me, fork me, go nuts.</p>\r\n\r\n<hr />\r\n\r\n<p>So that's <em>why</em> I created this new blog, but what about <em>how</em> it works?</p>\r\n\r\n<h1>Database, Or Lack Thereof</h1>\r\n<p>The most obvious backend capability of any blog is the storage and retrieval of blog articles. Most blogs have an archive page, a summary or recent articles, tags, etc. and while you could conceivably rig all that up manually it would get unwieldy very quickly, which is where a database comes into play. I've been intrigued by the file-based database concept used by some recent blogging/content/static site engines such as <a href=\"http://jekyllrb.com/\">Jekyll</a>. The only thing I don't like about many of those tools is the way that the content is separate from the code. I am obsessed with eliminating magic strings and strong-typing everything. The notion that a blog article would like to another blog article using a plain-text <code>a</code> tag keeps me up at night. What if you wanted to change the link? What if you deleted the post? What I wanted was a way to create my blog database from the file system but still maintain all the power and flexibility that my code gives me.</p>\r\n<p>To satisfy this, I wrote a little library I'm calling <a href=\"/razordatabase\">RazorDatabase</a> (by the way, if you look in the code for this blog post, that last link looks like <code>@Html.ActionLink(\"RazorDatabase\", MVC.Projects.RazorDatabase())</code> - see what I mean about strong links?). RazorDatabase takes all of the Razor views that are derived from a specified <code>WebViewPage</code> class, renders them at compile time, and stores the rendered content and any view properties in an in-memory collection (with caching to disk for quick loading on site startup). I'll write more about RazorDatabase in a future blog post once I've gotten it closer to general availability.</p>\r\n\r\n<h1>Writing Posts</h1>\r\n<p>Because the blog posts are just Razor views similar to any other, the easiest way to write them is from within Visual Studio. I could write them externally, but they'd still have to be included in the project and compiled with the site to get the compile-time rendering to work correctly. This suits me just fine - while I've enjoyed Windows Live Writer in the past, I'm also quite comfortable with HTML and don't mind writing up my posts from my IDE.</p>\r\n\r\n<h1>Other Content</h1>\r\n<p>Other non-blog pages on the site like <a href=\"/about\">About</a> and <a href=\"/likes\">Likes</a> are just regular ASP.NET MVC actions and views. Because the blog posts are also just actions and views (albeit ones that get loaded into an in-memory collection), the two can reference each other without problems. I really like the way I don't have to worry about whether I'm on a content page or a blog post - all the Razor syntax and code I'm used to using is available in either place.</p>\r\n\r\n<h1>T4MVC</h1>\r\n<p>Did I mention I hate magic strings? <a href=\"http://t4mvc.codeplex.com/\">T4MVC</a> is one of my all-time favorite libraries. It provides strongly typed HTML helpers and exposes other bits of code to help eliminate the magic string problem. I highly recommend you check it out if you're not already familiar with it.</p>\r\n\r\n<h1>Deployment</h1>\r\n<p>This site is automatically deployed on <a href=\"http://azure.microsoft.com/en-us/services/websites/\">Azure Websites</a> every time I commit to the master branch in the repository. I love the way this works. No publish process, no uploading - just code, push, and be done.</p>\r\n\r\n<hr />\r\n\r\n<p>Now that I've got full control of my platform and I've spent all this time creating it, <a href=\"http://www.hanselman.com/blog/YourBlogIsTheEngineOfCommunity.aspx\">I guess I'm out of excuses for not blogging</a>. Expect to see more frequent posts from me going forward (or at least that's the plan).</p>\r\n"},{"Title":"Method Chaining, Fluent Interfaces, and the Finishing Problem","Lead":"Or Why You Can't Have Your Cake And Eat It Too","Published":"2014-05-30T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["fluent interfaces","method chaining"],"ViewTypeName":"method_chaining_fluent_interfaces_and_the_finishing_problem","Rendered":"\r\n\r\n<p><a href=\"http://martinfowler.com/bliki/FluentInterface.html\">Fluent interfaces</a> have become very popular in C# APIs recently. <a href=\"http://martinfowler.com/bliki/FluentInterface.html\">Martin Fowler presumably coined the term in 2005</a> and at the time he wrote, “It's not a common style, but one we think should be better known”. Fluent interfaces are based on the older concepts of <a href=\"http://en.wikipedia.org/wiki/Method_chaining\">method chaining</a> and <a href=\"http://en.wikipedia.org/wiki/Method_cascading\">method cascading</a> (and the term has actually been misused quite a bit to refer to any type of method chaining), whereby the context of a call is passed through via method return values to the next method in the chain. This can result in a much more readable and concise API, particularly when many or a complex series of options or operations are available.</p>\r\n\r\n<p>The focus of this blog post is on a particular challenge of fluent interfaces and method chaining known as the “finishing problem.” To illustrate it, consider a logging framework. It might allow some number of chained methods such as <code>Severity()</code>, <code>Source()</code>, <code>User()</code>, <code>CallSite()</code>, etc.:</p>\r\n\r\n<pre><code class=\"language-csharp\">Log.Message(\"Oh, noes!\").Severity(Severity.Bad).User(\"jsmith\");</code></pre>\r\n\r\n<p>Looks nice, right? The problem here is that the logging framework doesn’t know when to write the log message to the log file. Do I do it in the <code>User()</code> method? What if I don’t use the <code>User()</code> method or I put it before the <code>Severity()</code> method, then when do I write to the file? This problem occurs any time you want the entire result of a method chain to take some external action other than manipulating the context of the chain.</p>\r\n\r\n<p>There are a number of patterns for mitigating the finishing problem. Notice that I didn’t say <em>solving the finishing problem</em> – it turns out this can’t really be completely resolved, at least not generally.</p>\r\n\r\n<h1>Terminating Method</h1>\r\n\r\n<p>This first technique is probably one of the easier, but it’s also a bad <a href=\"http://en.wikipedia.org/wiki/Code_smell\">code smell</a>. It requires the introduction of a method that serves to complete the chain and act on it’s final context. For example:</p>\r\n\r\n<pre><code class=\"language-csharp\">Log.Message(\"Oh, noes!\").Severity(Severity.Bad).User(\"jsmith\").Write();</code></pre>\r\n\r\n<p>See how we added the <code>Write()</code> method there at the end? That <code>Write()</code> method takes the chain context, writes it to disk, and doesn’t return anything (effectively stopping the chain). So why is this so bad? For one, it would be very easy to forget the <code>Write()</code> method at the end of the chain. This technique requires the programmer to remember something that the compiler can’t check and that wouldn’t be picked up at runtime if they forgot. That’s a recipe for misery. It’s also superfluous. Why the heck do I need a <code>Write()</code> method if that’s the whole point of using the log in the first place?</p>\r\n\r\n<h1>Method Argument</h1>\r\n\r\n<p>This technique encloses the method chain inside a containing method that will be responsible for acting on the result of the chain. For example:</p>\r\n\r\n<pre><code class=\"language-csharp\">Log.Write(new Message(\"Oh, noes!\").Severity(Severity.Bad).User(\"jsmith\"));</code></pre>\r\n\r\n<p>In this case, the <code>Log.Write()</code> method accepts an argument of the type that the chain passes along. Because the whole chain is an input to the <code>Write()</code> method, it can act on the result and write to the file. The downside to this technique is that you have to instantiate an object to pass to the <code>Write()</code> method. It’s also not particularly elegant.</p>\r\n\r\n<h1>Delegate Argument</h1>\r\n\r\n<p>This technique is very similar to the last one except that instead of passing in a newly instantiated object, one is instantiated by the <code>Write()</code> method and passed to a delegate that manipulates it before being acted on by <code>Write()</code>. The use of lambdas makes this look fairly tidy:</p>\r\n\r\n<pre><code class=\"language-csharp\">Log.Write(x => x.Message(\"Oh, noes!\").Severity(Severity.Bad).User(\"jsmith\"));</code></pre>\r\n\r\n<p>This has an advantage over the previous technique in that the argument to the delegate is already typed and so Intellisense can be used to provide a slightly better experience (instead of having to known what types of objects should be instantiated and passed to the method). Of course, the downside is that the syntax is getting even further afield of the nice concise ideal.</p>\r\n\r\n<h1>Casting</h1>\r\n\r\n<p>I have not seen mention of this technique anywhere else, probably because it only works well in specific scenarios. The idea is that the external action is taken upon casting the chain context object to some other type via a casting operator. For example:</p>\r\n\r\n<pre><code class=\"language-csharp\">LogWriter writer = (LogWriter)Log.Message(\"Oh, noes!\").Severity(Severity.Bad).User(\"jsmith\");</code>></pre>\r\n\r\n<p>Inside the chain context class (let’s call it LogOptions) you might have something like:</p>\r\n\r\n<pre><code class=\"language-csharp\">public class LogOptions\r\n{\r\n  public static string LogPath { get; set; }\r\n\r\n  public static implicit operator LogWriter(LogOptions ops)\r\n  {\r\n    File.AppendAllText(LogPath, ops.ToString());\r\n    return new LogWriter(ops);\r\n  }\r\n}</code></pre>\r\n\r\n<p>This technique really only makes sense if you’re actually going to do something with that <code>LogWriter</code> instance. If not, it’s going to create a bunch of squiggles in Visual Studio telling you it’s an unused variable and drive you nuts. However, this can be valuable if you’re working with another API that you know expects certain types of objects.</p>\r\n\r\n<h1>Rewinding</h1>\r\n\r\n<p>In very specific situations you may be able to essentially “undo” the result of the previous method in the chain on each subsequent one. This lets you keep the original ideal syntax:</p>\r\n\r\n<pre><code class=\"language-csharp\">Log.Message(\"Oh, noes!\").Severity(Severity.Bad).User(\"jsmith\");</code></pre>\r\n\r\n<p>Then, inside each method <code>Message()</code>, <code>Severity()</code>, and <code>User()</code>, check to see if it’s the first call in the chain (this can be determined by setting a flag in the chain context object on each chained method – if the flag isn’t set, this is the first method in the chain). If it’s not the first method in the chain, undo whatever the previous method did before doing it again with the new context state. For example, in the log scenario remove the last line in the file before appending a new replacement one (obviously you wouldn’t actually want to do this for a log file).</p>\r\n\r\n<h1>Buffering</h1>\r\n\r\n<p>You may be able to buffer the result of the chained methods until some other action that you know is going to happen takes place. For example, in the log example, the methods <code>Message()</code>, <code>Severity()</code>, and <code>User()</code> could add their respective state information to the <code>Log</code> instance and then output the log message <em>on the next</em> call to <code>Log.Message()</code>. You obviously wouldn't want to do that for this specific example because your log messages would get delayed and possibly never sent, but hopefully you get the idea. As it turns out, I actually used a form of this approach to handle the fluent interfaces in <a href=\"/fluentbootstrap\">FluentBootstrap</a>.</p>\r\n\r\n<h1>Don’t Use a Fluent Interface</h1>\r\n\r\n<p>It seems like everyone is trying to introduce method chains and fluent interfaces into their APIs recently. In my opinion, this often just causes more trouble than it solves. Maintaining the context objects for a complex fluent interface can be challenging and with the availability of named and optional arguments in C# methods now, I rarely see much syntactic benefit. To me, the following syntax with named arguments is just as terse and understandable as the fluent interface version (if not more so):</p>\r\n\r\n<pre><code class=\"language-csharp\">Log.Message(\"Oh, noes!\", severity: Severty.Bad, user: \"jsmith\");</code></pre>\r\n\r\n<p>In general, I’ve found fluent interfaces work very well for populating or initializing some set of options within a settings object that you’re going to pass around. As soon as you start trying to introduce external logic into the picture they become much more difficult to get right. Sometimes the best solution is to rethink the problem.</p>"},{"Title":"Introducing Nxdb","Lead":"A high-performance embedded XML database for .NET.","Published":"2012-02-24T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Nxdb","XML","XQuery","database"],"ViewTypeName":"introducing_nxdb","Rendered":"\r\n\r\n<p>For the second time in as many weeks, I have the pleasure of announcing a new open source project. This time I've released Nxdb, a high-performance embedded XML database for .NET with full XQuery support. It is essentially a .NET binding for the excellent <a href=\"http://basex.org/\">BaseX</a> Java XML database. However, Nxdb goes well beyond a simple wrapper by providing a native .NET API suitable for embedding (the primary focus of BaseX is on client/server uses), providing additional functionality to interface directly with .NET classes and objects, and rethinking several aspects of the BaseX design for the embedded use case. The underlying BaseX code is cross-compiled to IL using <a href=\"http://www.ikvm.net/\">IKVM</a> making Nxdb 100% native .NET, usable on all .NET platforms including <a href=\"http://www.mono-project.com\">Mono</a>.</p>\r\n\r\n<p>This project has a long history. Around the fall of 2008, my company, DRAC was tasked with developing an entirely new cross-platform graphical user interface for one of the US Air Force's most complex models. The model itself used over a hundred different input files, each with slightly different grammar and syntax. What we needed was a way to store, query, and manipulate all of this data in a consistent way. XML seemed like an ideal choice given it's ability to represent data hierarchically and powerful XQuery query language. Having already made the decision to use Mono as our platform, we scoured both the open source community and commercial vendors to find a database backend that was a good fit. We were surprised to discover that there weren't very many suitable embedded XML databases for .NET and the ones we did find were either too slow for processing and querying the volume of data we needed to work with or had cumbersome and limited APIs that didn't allow the control we needed.</p>\r\n\r\n<p>Thankfully, we stumbled on BaseX when it was a fairly early project. We were immediately impressed with the completeness of it's query engine and the fast performance. Unfortunately it was written in Java and we were using .NET and had already sunk considerable resources into the GUI shell. Having used IKVM to cross-compile Java code before, we decided to give it a shot for BaseX and were pleased to discover it converted and ran quite well. Over the intervening years we've separated our BaseX binding from the original project, applied it to many other projects, and watched as BaseX has flourished. Nxdb is now used in production code every day and we're excited to share it with the rest of the open source community.</p>\r\n\r\n<h1>Usage</h1>\r\n\r\n<p>Nxdb is designed to be easy to use. It provides two primary means of working with the database. The first is by directly working with the database through classes that represent XML nodes. The other main interface is through the evaluation of XQuery expressions.</p>\r\n\r\n<p>The Database class serves as the starting point for working with an Nxdb database. It encapsulates all of the operations on a database instance and provides methods for getting node objects and evaluating queries. Before use, Nxdb must be initialized as follows using the static Database.Initialize() method (path is where all of the database files will be stored):</p>\r\n\r\n<pre><code class=\"language-csharp\">Database.Initialize(path);</code></pre>\r\n\r\n<p>Once that's done, a new or existing database can be obtained via the static Database.Get() method:</p>\r\n\r\n<pre><code class=\"language-csharp\">Database.Get(databaseName);</code></pre>\r\n\r\n<p>Once a Database instance has been obtained, XML content can be added, documents fetched, and queries executed. A very simple example usage might look like this:</p>\r\n\r\n<pre><code class=\"language-csharp\">using Nxdb;\r\nDatabase.Initialize(\"C:\\Temp\\NxdbData\");\r\nusing(Database db = Database.Get(\"Example\"))\r\n{\r\n  db.Add(\"DocA\", \"<A><B>b</B><C>c</C></A>\");\r\n  Document doc = db.GetDocument(\"DocA\");\r\n  Console.Write(doc.OuterXml);\r\n}</code></pre>\r\n\r\n<h1>Obtaining</h1>\r\n\r\n<p>Nxdb is open source and released under the Apache 2.0 license. It can be obtained here: <a href=\"https://github.com/somedave/Nxdb\">https://github.com/somedave/Nxdb</a></p>\r\n"},{"Title":"Introducing NiceThreads","Lead":"A threading utility library designed to make different threading primitives easier to use.","Published":"2012-02-17T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["NiceThreads","Threading","Monitor","ReaderWriterLockSlim","locking","ILocker"],"ViewTypeName":"introducing_nicethreads","Rendered":"\r\n\r\n<p>NiceThreads is threading utility library designed to make different threading primitives easier to use with a more consistent API. It started out of frustration with the different options (and more specifically, the different APIs) for enabling thread safety and locks in the .NET framework and how much code was required to use some of them. NiceThreads provides a consistent interface for standard <code><a href=\"http://msdn.microsoft.com/en-us/library/system.threading.monitor.aspx\">Monitor</a></code> locks and the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.threading.readerwriterlockslim.aspx\">ReaderWriterLockSlim</a></code> class (and possibly others in the future). It also provides support for activating and deactivating these locking primitives through the <a href=\"http://msdn.microsoft.com/en-us/library/system.idisposable.aspx\">disposable pattern</a>. Finally, it provides wrappers that can easily provide thread-safety to unsafe objects.</p>\r\n<h1>Common API</h1>\r\n<p>Both <code>Monitor</code> (and the \"lock\" statement which is syntactic sugar for <code>Monitor</code>) and <code>ReaderWriterLockSlim</code> attempt to solve the same problem: preventing conflicting concurrent access to objects that might need to be read or written to by multiple threads. They both do this by limiting access to the object to one thread at a time (or in the case of read locks provided by <code>ReaderWriterLockSlim</code>, only to threads that signal they want read-only access) while making other threads wait their turn. However, even though both classes provide similar functionality they are intended for different uses and have <a href=\"http://blogs.msdn.com/b/pedram/archive/2007/10/07/a-performance-comparison-of-readerwriterlockslim-with-readerwriterlock.aspx\">different tradeoffs</a>. Further, they use similar but different APIs making switching between them difficult.</p>\r\n<p>To solve this problem, NiceThreads provides a consistent ILocker interface that has implementations wrapping both classes and provides a consistent API. The rest of NiceThreads is designed to interact with <code>ILocker</code> allowing interchangeable use of the different types of locking primitives. In addition, the <code>ILocker</code> interface can be used directly to provide a consistent wrapper around either locking class for your own code.</p>\r\n<p>For example:</p>\r\n<pre><code class=\"language-csharp\">ILocker locker = new ReaderWriterLockSlimLocker();\r\nlocker.EnterReadLock();\r\n// Do work...\r\nlocker.ExitReadLock();\r\nlocker = new MonitorLocker();\r\nlocker.EnterReadLock();\r\n// Do work...\r\nlocker.ExitReadLock();</code></pre>\r\n<h1>Disposable Pattern</h1>\r\n<p>Both locking primitives require explicitly activating the lock and subsequently manually removing the lock when finished. This can lead to problems if the developer forgets to release the lock or ends up exiting the normal program flow (for example, because an exception was thrown). The <code>lock</code> keyword in C# attempts to make this design easier to use for the <code>Monitor</code> class by abstracting <code>Monitor</code> instantiation and surrounding it's use in a control block, however, no such keyword exists for other locking classes such as <code>ReaderWriterLockSlim</code>. In addition, using the <code>lock</code> keyword means some control is lost over the lifecycle and usage of the underlying <code>Monitor</code> class.</p>\r\n<p>NiceThreads attempts to solve this problem by providing a set of classes that implement <code>IDisposable</code> and wraps an underlying <code>ILocker</code> (which in turn provides consistent access to alternate framework locking classes). They activate the requested lock type on instantiation and free it on disposal. This allows the developer to use the built-in support for the disposable pattern in .NET to automatically free a lock when finished with it by using the <code>using</code> statement.</p>\r\n<p>For example:</p>\r\n<pre><code class=\"language-csharp\">ILocker locker = new ReaderWriterLockSlimLocker();\r\nusing(new ReadLock(locker))\r\n{\r\n  // Do work...\r\n}</code></pre>\r\n<h1>Thread-Safe Wrappers</h1>\r\n<p>Even with the added convenience of a consistent API and disposable pattern support, implementing thread-safety for non-thread-safe objects can still require a fair amount of code. For every object that needs to be protected, a new locking object potentially needs to be created and maintained. NiceThreads helps implement thread safety for objects by providing wrapper classes that encapsulate generic locking logic and provide thread-safe access to their underlying object. <code>SyncObject&lt;T&gt;</code> wraps an arbitrary type and <code>ReadOnlySyncObject&lt;T&gt;</code> wraps an arbitrary type while providing \"readonly\" semantics (I.e., once the <code>ReadOnlySyncObject&lt;T&gt;</code> has been constructed, it's underlying object cannot be changed). These classes provide a variety of methods to expose their wrapped object in thread-safe ways including thread-safe getting and setting, disposable pattern access, and action/function providers (I.e., lambdas or anonymous methods).</p>\r\n<p>For example:</p>\r\n<pre><code class=\"language-csharp\">SyncObject&lt;int&gt; num = new SyncObject&lt;int&gt;(10);\r\nnum.Sync = 20; // Access as a property with a thread-safe setter\r\nint value = num.Sync; // Access as a property with a thread-safe getter\r\nusing(num.WriteLock())\r\n{\r\n // We can now access using unsafe code\r\n num.UnsyncField++; // Provides direct field access\r\n value = num.Unsync; // Access as a property with an unsafe getter\r\n}\r\nnum.DoWrite(n => n + 10); // Thread-safe write with an Action\r\nvalue = num.DoRead(n => n + 100); // Thread-safe read with a Func\r\n</code></pre>\r\n<h1>Obtaining</h1>\r\n<p>NiceThreads is open source and released under the Apache 2.0 license. It can be obtained here: <a href=\"https://github.com/somedave/NiceThreads\">https://github.com/somedave/NiceThreads</a></p>\r\n"},{"Title":"How to Post Data (Including Checkboxes) in a KendoUI Grid back to an ASP.NET MVC Action","Lead":null,"Published":"2014-01-03T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["ASPNET","ASPNET MVC","KendoUI","KendoUI MVC","grid","checkbox","postback"],"ViewTypeName":"how_to_post_data_in_a_kendoui_grid","Rendered":"\r\n\r\n<p>The KendoUI grid is great for displaying data and manipulating it one row at a time. There are several options available including posting the edited data back via AJAX, performing in-line editing, etc. However, there is no built-in support for posting the grid data on form submission because the grid isn't an actual form control. This came up recently when designing a feature for an enterprise contact list. I had a view that should allow the user to select two contacts and merge them into one. The user needed to be able to select which addresses, phone numbers, etc. from both contact should be kept in the merged contact. A grid seemed like a perfect interface match since it supports multiple columns and I could (presumably) add a checkbox to the first (or last) one for the user to select. This turned out to be much more complicated than I had anticipated and there isn't a lot of help out there, so I'll walk you through the process.</p>\r\n\r\n<h1>The Model</h1>\r\n\r\n<p>My model is simple:</p>\r\n\r\n<pre><code class=\"language-csharp\">public class ContactInfoGridItem\r\n{\r\n    public string ContactInfoId { get; set; }\r\n    public bool Keep { get; set; }\r\n    public string Contact { get; set; }\r\n    public string Type { get; set; }\r\n    public string Content { get; set; }\r\n}</code></pre>\r\n\r\n<p>The important fields are <code>ContactInfoId</code> and <code>Keep</code> – <code>Contact</code>, <code>Type</code>, and <code>Content</code> are just bits of domain data for display to the user but won't be posted back on submit (they'll get default values after model binding).</p>\r\n\r\n<h1>The Action</h1>\r\n\r\n<p>This is the action we eventually want to receive the data:</p>\r\n\r\n<pre><code class=\"language-csharp\">public virtual ActionResult Index(IEnumerable&lt;ContactInfoGridItem&gt; contactInfo)\r\n{\r\n    //...\r\n}</code></pre>\r\n\r\n<p>We want the grid to send us a collection of <code>ContactInfoGridItems</code>. In my collection I only need the <code>ContactInfoId</code> and <code>Keep</code> fields to be set.</p>\r\n\r\n<h1>The View</h1>\r\n\r\n<p>The grid is declared like this (using KendoUI for ASP.NET MVC):</p>\r\n\r\n<pre><code class=\"language-csharp\">@(Html.Kendo().Grid(new List&lt;ContactInfoGridItem&gt;())\r\n    .Name(\"grid\")\r\n    .DataSource(d =&gt; d.Ajax()\r\n        .Read(r =&gt; r.Action(MVC.ContactList.Merge.ContactInfoGridRead()))\r\n        .ServerOperation(false))\r\n    .Columns(c =&gt;\r\n    {\r\n        c.Bound(m =&gt; m.ContactInfoId).Hidden()\r\n            .ClientTemplate(\"&lt;input type='hidden' \"\r\n                + \"name='contactInfo[#= gridIndex(data) #].ContactInfoId' \"\r\n                + \"value='#= ContactInfoId #' /&gt;\");\r\n        c.Bound(m =&gt; m.Keep)\r\n            .ClientTemplate(\"&lt;input type='checkbox' \"\r\n                + \"name='contactInfo[#= gridIndex(data) #].Keep' \"\r\n                + \"value='true' \"\r\n                + \"#if (Keep) { #checked='checked'# } #/&gt;\"\r\n                + \"&lt;input type='hidden' value='false' \"\r\n                + \"name='contactInfo[#= gridIndex(data) #].Keep' /&gt;\");\r\n        c.Bound(m =&gt; m.Contact);\r\n        c.Bound(m =&gt; m.Type);\r\n        c.Bound(m =&gt; m.Content);\r\n    }))</code></pre>\r\n\r\n<p>So what's going on here? Don't worry about the Action – if you've never seen this syntax before, I'm just using <a href=\"http://t4mvc.codeplex.com/\">T4MVC</a> (which I love) to eliminate magic strings. The first important note is that I'm declaring <code>ServerOperation(false)</code> on the <code>DataSource</code>. This ensures that KendoUI properly sends the data back to the server. I found <a href=\"http://www.kendoui.com/code-library/mvc/grid/submit-form-containing-grid-along-with-other-input-elements.aspx\">this example</a> very helpful in understanding how to rig up posting of grid data. Next, notice the client templates for the <code>ContactInfoId</code> and <code>Keep</code> columns. The general principle here is that if we stick form controls (even hidden ones) directly inside the grid then they will get posted to the server like any other form control. The trick to getting a grid to work though is knowing how to identify and name form controls in such a way that ASP.NET MVC understands how to turn them into a collection. This can be accomplished by adding brackets after the form control name with an index – see <a href=\"http://haacked.com/archive/2008/10/23/model-binding-to-a-list.aspx/\">this blog post</a> for more details.</p>\r\n\r\n<p>What I've covered so far works great for posting back form controls such as combo boxes and text entries as well as posting back hidden form controls with the initial data for a row and column. However, there is one more trick we need to use to get checkboxes to post successfully. The problem is that unlike other form controls, checkbox inputs do not post their data in the same way. Checking a checkbox does not actually change it's value. It took some digging to figure out how to get this to work, but I eventually stumbled upon <a href=\"http://stackoverflow.com/questions/14730746/getting-checkbox-value-in-asp-net-mvc-4\">a very helpful Stack Overflow post</a>. It turns out that ASP.NET MVC and the default model binder use a little hack to get checkbox values bound on post. They create the checkbox with a value of true, but then also create a hidden input with the same name and a value of false. When a form is submitted, the model binder knows how to reconcile the two identically named form inputs to come up with the actual value of the checkbox based on it's checked state. We just need to use the same technique in our column client template and let the default model binder do it's thing.</p>\r\n\r\n<p>Now when I post the form that contains this grid I'll get a collection of <code>ContactInfoGridItem</code> models with the correct <code>ContactInfoId</code> and <code>Keep</code> fields.</p>"},{"Title":"How I Export Kendo Grids to Excel (or CSV)","Lead":null,"Published":"2014-03-06T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["ASPNET","ASPNET MVC","KendoUI","KendoUI MVC","grid","export","CSV","Excel"],"ViewTypeName":"how_i_export_kendo_grids_to_excel_or_csv","Rendered":"\r\n\r\n<p>Exporting grid data is a common need for line-of-business applications. Once you’ve got all the great data presented, filtered, etc. how to you allow the user to download it and continue playing with it? There are many approaches discussed online to solve this (see <a href=\"http://blogs.telerik.com/kendoui/posts/13-03-12/exporting_the_kendo_ui_grid_data_to_excel\">here</a> and <a href=\"http://stackoverflow.com/questions/14472802/by-using-kendo-how-to-export-the-grid-data-to-any-one-of-the-following-files-cs\">here</a>). Unfortunately, I didn’t find any of them really had the polish I wanted and that my users demand. There are really two categories of solutions to this problem:</p>\r\n\r\n<h1>Server-Side</h1>\r\n\r\n<p>This approach relies on intercepting or otherwise taking the output of the method that generates the data for the grid and formatting it for download by the user. There are a couple of problems with this technique. The first is that the data you return to the grid may not be suitable for the user. It may have aggregate data, piecemeal data, etc. You also loose any heading information you’ve added to the grid. Sure, you could use something like .NET reflection to get the name of properties, but that’s not the same thing as headers. Especially since the Kendo grid (when used through the Kendo MVC library) automatically splits and/or uses data annotations for the header text. You also loose any filtering, sorting, etc. unless you also capture the state of the grid options which can be tricky to get right. In general, I think it comes down to the server-side data that the grid uses isn’t the same thing as what’s presented to the user. And if you’re going to return a CSV or Excel file that doesn’t match what they’re looking at on the screen then you’re going to cause confusion.</p>\r\n\r\n<h1>Client-Side</h1>\r\n\r\n<p>The other kind of approach is to get the data on the client. I like this approach better because it has the potential to exactly match what the user sees on their screen. I found the following <a href=\"https://github.com/uber-rob/kendo-grid-csv-download\">source on GitHub</a>, which itself is based on the work in this <a href=\"http://www.telerik.com/forums/export-to-csv\">forum thread</a>. The goal of this code is to trigger downloading and formatting of the data by the grid itself after the user has manipulated it and then package that data into a file for download. In other words, use the grid as a proxy so that the data you use for the file matches exactly what the user sees. While I think the approach is sound, I found many problems with the code itself. For example, it didn’t wait for the grid data source to complete fetching data, thus often returning stale data to the user. It also lacked support for things like stripping out HTML (which I use in grids a lot for embedded links). My modified version looks like this:</p>\r\n\r\n<pre><code class=\"language-javascript\">// Modified from https://github.com/uber-rob/kendo-grid-csv-download\r\nfunction kendoGridToCSV(grid) {\r\n\r\n    // Get access to basic grid data\r\n    var datasource = grid.dataSource;\r\n    var originalPageSize = datasource.pageSize();\r\n    var originalPage = datasource.page();\r\n\r\n    // Remove the success function since we don't care about what happens after we get the data\r\n    // (and the prototype success function causes problems when we copy the datasource over from the grid)\r\n    datasource.success = function (data) {\r\n        var csv = '';\r\n\r\n        // Add the header row\r\n        for (var i = 0; i &lt; grid.columns.length; i++) {\r\n            var title = grid.columns[i].title,\r\n                field = grid.columns[i].field;\r\n            if (typeof (field) === \"undefined\") { continue; /* no data! */ }\r\n            if (typeof (title) === \"undefined\") { title = field }\r\n\r\n            title = title.replace(/\"/g, '\"\"');\r\n            csv += '\"' + title + '\"';\r\n            if (i &lt; grid.columns.length - 1) {\r\n                csv += \",\";\r\n            }\r\n        }\r\n        csv += \"\\n\";\r\n\r\n        // Add each row of data\r\n        $.each(data.Data, function (index, row) {\r\n            // Do a first pass to parse any dates (may eventually need to parse other types of received values here)\r\n            for (var i = 0; i &lt; grid.columns.length; i++) {\r\n                var fieldName = grid.columns[i].field;\r\n                if (typeof (fieldName) === \"undefined\") { continue; }\r\n                if (typeof row[fieldName] == \"string\" &amp;&amp; row[fieldName].lastIndexOf(\"/Date(\", 0) === 0) {\r\n                    row[fieldName] = kendo.parseDate(row[fieldName]);\r\n                }\r\n            }\r\n\r\n            // Now generate the actual values\r\n            for (var i = 0; i &lt; grid.columns.length; i++) {\r\n                var fieldName = grid.columns[i].field;\r\n                if (typeof (fieldName) === \"undefined\") { continue; }\r\n\r\n                // Get the template and use it to get the display value\r\n                var tmpl = grid._cellTmpl(grid.columns[i], {});\r\n                var kt = kendo.template(tmpl);\r\n                value = kt(row);\r\n\r\n                // Strip any HTML (needs to be inclosed in an outer tag to work)\r\n                // Also strip any elements with the 'no-export' class\r\n                // Also remove any label elements since they get used often in links\r\n                var html = $('&lt;div&gt;' + value + '&lt;/div&gt;');\r\n                html.find('.label').remove();\r\n                html.find('.no-export').remove();\r\n                value = html.text().trim();\r\n\r\n                // Format for CSV (escape quotes and add the comma)\r\n                value = value.replace(/\"/g, '\"\"');\r\n                csv += '\"' + value + '\"';\r\n                if (i &lt; grid.columns.length - 1) {\r\n                    csv += \",\";\r\n                }\r\n            }\r\n            csv += \"\\n\";\r\n        });\r\n\r\n        // Send the CSV content back to the server to generate a download link\r\n        postToURL(\"/CsvToExcel\", { data: csv });\r\n\r\n        // Reset back to original values and reset the datasource\r\n        datasource.pageSize(originalPageSize);\r\n        datasource.page(originalPage);\r\n        delete datasource.success;   \r\n\r\n        // Reset the datasource now that we're done\r\n        datasource._dequeueRequest();\r\n        datasource.view();\r\n        kendo.ui.progress(grid.element, false);\r\n    }\r\n\r\n    // Increase page size to cover all the data and then trigger fetching and processing of all the data\r\n    datasource.pageSize(datasource.total());\r\n    datasource.view();\r\n}</code></pre>\r\n\r\n<p>The one problem with this code is that it creates the data on the client. “But that’s great!” you say, “The client won’t have to download anything extra!” you say. Unfortunately there’s actually no good cross-browser way to get a blob of data into a “file” that the client presents for download to the user. As suggested by the original authors, there is a library called <a href=\"https://github.com/dcneiner/Downloadify\">Downloadify</a> that can solve this using JavaScript and Flash. If that works for you, great! However, I’m not a fan of Flash and can’t rely on it being available in my user’s environment so I needed a workaround.</p>\r\n\r\n<h2>Downloading The File</h2>\r\n\r\n<p>The first challenge is getting the data to the user. I found this JavaScript method that can be used to post arbitrary content to a server (we can’t use the jQuery AJAX post method because we need this to be an actual post request so the prompt to save the resulting file is presented):</p>\r\n\r\n<pre><code class=\"language-javascript\">// This posts specific data to a given URL\r\n// From http://stackoverflow.com/questions/133925/javascript-post-request-like-a-form-submit\r\nfunction postToURL(url, values) {\r\n    var form = $('&lt;form id=\"postToURL\"&gt;&lt;/form&gt;');\r\n\r\n    form.attr(\"method\", \"post\");\r\n    form.attr(\"action\", url);\r\n\r\n    $.each(values, function (key, value) {\r\n        var field = $('&lt;input&gt;&lt;/input&gt;');\r\n\r\n        field.attr(\"type\", \"hidden\");\r\n        field.attr(\"name\", key);\r\n        field.attr(\"value\", value);\r\n\r\n        form.append(field);\r\n    });\r\n\r\n    // The form needs to be a part of the document in\r\n    // order for us to be able to submit it.\r\n    $(document.body).append(form);\r\n    form.submit();\r\n    $(\"#postToURL\").remove();\r\n}</code></pre>\r\n\r\n<p>You’ll notice it’s called from inside the function that converts the grid to CSV data. That solves the client-side part of the equation. Yes, I know what you’re thinking. Isn’t it inefficient to have the client get the data from the server, format it, and then send it right back to the server, only to have it sent BACK to the client as a file? Well, yes, yes it is. In my situation though, the performance hit was acceptable in order to achieve the best user interaction. That’s aided by the fact that the user clicked a button to make this happen. If a user takes an action that they know might be long-running, their a lot more likely to forgive a little wait time.</p>\r\n\r\n<p>On the server I have an action called <code>CsvToExcel</code>. However, before I show you that, here’s an alternate action that would have just packaged up the CSV and returned it as a file:</p>\r\n\r\n<pre><code class=\"language-csharp\">[POST(\"MakeFile\")]\r\n[ValidateInput(false)]\r\npublic virtual ActionResult MakeFile(string fileName, string contentType, string data)\r\n{\r\n    if (string.IsNullOrWhiteSpace(fileName) || string.IsNullOrWhiteSpace(contentType) || string.IsNullOrWhiteSpace(data))\r\n        return HttpNotFound();\r\n    return File(Encoding.UTF8.GetBytes(data), contentType, fileName);\r\n}</code></pre>\r\n\r\n<p>Now my actual action uses <a href=\"http://www.aspose.com/.net/excel-component.aspx\">Aspose Cells</a> to create an Excel file with headings, frozen panes, etc. but you could make do with other free alternatives mentioned in the linked articles at the beginning of this post. Here is my real action:</p>\r\n\r\n<pre><code class=\"language-csharp\">[POST(\"CsvToExcel\")]\r\n[ValidateInput(false)]\r\npublic virtual ActionResult CsvToExcel(string data)\r\n{\r\n    if (string.IsNullOrWhiteSpace(data))\r\n        return HttpNotFound();\r\n\r\n    // Create a workbook from the CSV data\r\n    Workbook workbook;\r\n    using(MemoryStream inputStream = new MemoryStream(Encoding.UTF8.GetBytes(data)))\r\n    {\r\n        workbook = new Workbook(inputStream, new LoadOptions(LoadFormat.CSV));\r\n    }\r\n    Worksheet worksheet = workbook.Worksheets[0];\r\n\r\n    // Make the heading row bold\r\n    Style boldStyle = workbook.Styles[workbook.Styles.Add()];\r\n    boldStyle.Font.IsBold = true;\r\n    worksheet.Cells.Rows[0].ApplyStyle(boldStyle, new StyleFlag() { FontBold = true });\r\n\r\n    // Freeze, autofit, and activate autofilter for the heading row\r\n    worksheet.FreezePanes(1, 0, 1, 0);\r\n    worksheet.AutoFitColumns();\r\n    int letterIndex = worksheet.Cells.MaxDataColumn + 65;\r\n    char letter = letterIndex &gt; 90 ? 'Z' : (char)letterIndex;\r\n    worksheet.AutoFilter.Range = \"A1:\" + letter + \"1\";\r\n\r\n    // Return the file\r\n    byte[] output;\r\n    using (MemoryStream outputStream = new MemoryStream())\r\n    {\r\n        workbook.Save(outputStream, SaveFormat.Xlsx);\r\n        outputStream.Seek(0, SeekOrigin.Begin);\r\n        output = outputStream.ToArray();\r\n    }\r\n    return File(output, \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", \"grid.xlsx\");\r\n}</code></pre>\r\n\r\n<h2>Rigging It Up</h2>\r\n\r\n<p>The last part is rigging this all up to an actual grid. I wanted it to be as easy as possible to add this capability to any arbitrary grid. To that end, I create an extension method for the Kendo MVC wrappers that lets me add an “Export” button the exact same way you add a “Create” button to the grid toolbar. Here’s the extension:</p>\r\n\r\n<pre><code class=\"language-csharp\">public static GridToolBarCustomCommandBuilder&lt;TModel&gt; Export&lt;TModel&gt;(this GridToolBarCommandFactory&lt;TModel&gt; factory)\r\n    where TModel : class, new()\r\n{\r\n    return factory.Custom().Text(\"Export\").HtmlAttributes(new { @class = \"export-grid\" });\r\n}</code></pre>\r\n\r\n<p>And here’s the small bit a JavaScript that supports it (essentially rigging up a jQuery click handler for the new button to the <code>kendoGridToCSV</code> function mentioned earlier:</p>\r\n\r\n<pre><code class=\"language-javascript\">// This rigs up the export button on the grid\r\n$(\".export-grid\").click(function (e) {\r\n    e.preventDefault();\r\n    var grid = $(e.target).parents('.k-grid').data(\"kendoGrid\");\r\n    kendoGridToCSV(grid);\r\n});</code></pre>\r\n\r\n<p>Finally, here’s how to use it on your grid:</p>\r\n\r\n<pre><code class=\"language-csharp\">@(Html.Kendo().Grid(...).Name(\"...\")\r\n    ...\r\n    .ToolBar(x =&gt; x.Export())\r\n    ...\r\n)</code></pre>\r\n\r\n<p>Easy, right? I hope this was helpful – it took me a while to work through all the bits and hopefully it will save you some time.</p>"},{"Title":"Getting an HtmlHelper for an Alternate Model Type","Lead":null,"Published":"2012-10-17T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["ASPNET","ASPNET MVC","HtmlHelper"],"ViewTypeName":"getting_an_htmlhelper_for_an_alternate_model_type","Rendered":"\r\n\r\n\r\n<p>First off, I'm back and have a lot of little tips to blog about over the next several weeks. Since my last post I have changed jobs and am no longer working with Mono, Gtk#, or XML on a daily basis. However, I am still developing for the .NET platform and have been focusing recently on ASP.NET MVC and Entity Framework. Now, on to the topic at hand...</p>\r\n\r\n<p>By default, the Razor view engine for ASP.NET MVC rigs up a nice little object of type <code>HtmlHelper&lt;TModel&gt;</code> for us that can be used as the first argument in extension methods. This convention gets used a lot for all sorts of HTML helpers such as automatic generation of form controls, validation messages, etc. In most cases, you want to operate on the model type that was passed to the view and the default <code>HtmlHelper</code> instance works fine. However, there are some cases when you might need access to a <code>HtmlHelper</code> that has a different generic type than that of the view's model. Some of these include displaying the display name metadata (such as that from a <code>DisplayAttribute</code> on your model) in column headers for a table (in which case the view's model is probably an <code>IEnumerable</code> and not the actual type that you want metadata for) and displaying form controls for models included through encapsulation inside the view's model. Regardless of the reason, it's not easy to create an <code>HtmlHelper</code> for a type other than the specified model - you can't just construct one from scratch because the HtmlHelper class expects a lot of information about the context and data in the view.</p>\r\n\r\n<p>Thankfully there are ways to make this work. I would like to give a lot of credit to Tahir Hassan for his answer to a <a href=\"http://stackoverflow.com/questions/1321254/asp-net-mvc-typesafe-html-textboxfor-with-different-outputmodel\">related question on Stack Overflow</a>. In his answer he describes an HTML helper extension method that can get a new <code>HtmlHelper</code> of a requested type. The code in this article is based very heavily on his code with very few changes. Below is the code for a series of extension methods and direct methods (more on these in a later post) for getting an alternate <code>HtmlHelper</code>.</p>\r\n\r\n<pre><code class=\"language-csharp\">public static class HtmlHelpers\r\n{\r\n    public static HtmlHelper&lt;TModel&gt; For&lt;TModel&gt;(this HtmlHelper helper) where TModel : class, new()\r\n    {\r\n        return For&lt;TModel&gt;(helper.ViewContext, helper.ViewDataContainer.ViewData, helper.RouteCollection);\r\n    }\r\n\r\n    public static HtmlHelper&lt;TModel&gt; For&lt;TModel&gt;(this HtmlHelper helper, TModel model)\r\n    {\r\n        return For&lt;TModel&gt;(helper.ViewContext, helper.ViewDataContainer.ViewData, helper.RouteCollection, model);\r\n    }\r\n\r\n    public static HtmlHelper&lt;TModel&gt; For&lt;TModel&gt;(ViewContext viewContext, ViewDataDictionary viewData, RouteCollection routeCollection) where TModel : class, new()\r\n    {\r\n        TModel model = new TModel();\r\n        return For&lt;TModel&gt;(viewContext, viewData, routeCollection, model);\r\n    }\r\n\r\n    public static HtmlHelper&lt;TModel&gt; For&lt;TModel&gt;(ViewContext viewContext, ViewDataDictionary viewData, RouteCollection routeCollection, TModel model)\r\n    {\r\n        var newViewData = new ViewDataDictionary(viewData) { Model = model };\r\n        ViewContext newViewContext = new ViewContext(\r\n            viewContext.Controller.ControllerContext,\r\n            viewContext.View,\r\n            newViewData,\r\n            viewContext.TempData,\r\n            viewContext.Writer);\r\n        var viewDataContainer = new ViewDataContainer(newViewContext.ViewData);\r\n        return new HtmlHelper&lt;TModel&gt;(newViewContext, viewDataContainer, routeCollection);\r\n    }\r\n\r\n    private class ViewDataContainer : System.Web.Mvc.IViewDataContainer\r\n    {\r\n        public System.Web.Mvc.ViewDataDictionary ViewData { get; set; }\r\n\r\n        public ViewDataContainer(System.Web.Mvc.ViewDataDictionary viewData)\r\n        {\r\n            ViewData = viewData;\r\n        }\r\n    }\r\n}</code></pre>\r\n\r\n<p>Once these extension methods are available you can write things like the following in your views:</p>\r\n\r\n<pre><code class=\"language-csharp\">&lt;th&gt;@(Html.For&lt;TableItemModel&gt;().DisplayNameFor(m => m.ThisColumnProperty))&lt;/th&gt;</code></pre>\r\n\r\n<pre><code class=\"language-csharp\">&lt;td&gt;@(Html.For(rowItem).TextBoxFor(m => m.ThisColumnProperty))&lt;/td&gt;</code></pre>\r\n\r\n<p>By itself this is already a powerful capability and opens up your views to additional model types easily. In my next post I'll detail how to use the non-extension versions with the MVC wrappers for KendoUI to automatically set the title of a bound grid column.</p>\r\n"},{"Title":"Exporting a GtkSharp TreeView to CSV","Lead":"All packaged up in nice little utility methods.","Published":"2010-04-09T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Mono","GtkSharp","CellRenderer","CSV","TreeModel","TreeView","TreeViewColumn"],"ViewTypeName":"exporting_a_gtksharp_treeview_to_csv","Rendered":"\r\n\r\n<p>I recently had to create some functionality to export a TreeView widget to a CSV file for further analysis. Since I tend to think about generic behavior, I decided to code up a method that would take any arbitrary TreeView and perform the export operation. Luckily, the TreeView widget and the attached TreeModel both contain a lot of functionality for accessing the data and it's presentation. I decided that I wanted the exported CSV file to represent the perspective of the model as currently represented in the TreeView including column visibility and sort order. This led to the trickiest part of the process. Because a CellRenderer can be customized using cell data functions (such as those added by a call to TreeViewColumn.SetCellDataFunc), I had to pull the content to export from the CellRenderer as opposed to pulling directly from the TreeModel. Turns out there's a method to take the TreeIter from a TreeModel and apply it to all the CellRenderers in a given TreeViewColumn. Since I really only care about textual content, I decided to only export those columns that contain CellRendererText renderers.</p>\r\n<p>After working out the algorithm to fetch what needed to be exported I thought I was ready to roll. Turns out that the CSV pseudo-standard is pretty complex though (the RFC is <a href=\"http://www.rfc-editor.org/rfc/rfc4180.txt\">here</a>), and I quickly got bogged down in writing all kinds of special cases for escaping, quoting, etc. Thankfully, someone else had already been down this road and I was able to find the excellent <a href=\"http://kbcsv.codeplex.com/\">KBCsv</a> library which will write and read formatted CSV files. My only complaint was that it used another utility library purely for convenience in exception generation and null checking (I already use a ton of libraries in our application and I'd prefer not to add any unnecessarily). I replaced the calls to the utility library with the language equivalents, but that's totally a personal preference.</p>\r\n<p>Without further adieu, I present the <code>TreeViewHelper.ExportToCsv</code> and <code>TreeViewHelper.ExportToCsvFile</code> methods...</p>\r\n<pre><code class=\"language-csharp\">using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing Gtk;\r\nusing Kent.Boogaart.KBCsv;\r\n\r\nnamespace Somedave\r\n{\r\n public static class TreeViewHelper\r\n {\r\n  public static bool ExportToCsv(TreeView treeView, Window parent)\r\n  {\r\n   FileChooserDialog fcd = new FileChooserDialog(\"Export File\", parent, FileChooserAction.Save,\r\n   \"Cancel\", ResponseType.Cancel, \"Export\", ResponseType.Accept);\r\n   fcd.DoOverwriteConfirmation = true;\r\n   FileFilter filter = new FileFilter { Name = \"CSV File\" };\r\n   filter.AddPattern(\"*.csv\");\r\n   fcd.AddFilter(filter);\r\n   if (fcd.Run() == (int)ResponseType.Accept)\r\n   {\r\n    string path = fcd.Filename;\r\n    fcd.Destroy();\r\n    return ExportToCsvFile(treeView, path);\r\n   }\r\n   fcd.Destroy();\r\n   return false;\r\n  }\r\n\r\n  public static bool ExportToCsvFile(TreeView treeView, string path)\r\n  {\r\n   //Get the iterator\r\n   TreeIter iter;\r\n   if (treeView.Model.GetIterFirst(out iter))\r\n   {\r\n    //Create the stream\r\n    using (StreamWriter streamWriter = new StreamWriter(path, false))\r\n    {\r\n     //Create the CSV writer\r\n     using (CsvWriter csvWriter = new CsvWriter(streamWriter))\r\n     {\r\n      List&lt;string&gt; headers = new List&lt;string&gt;();\r\n      List&lt;string&gt; values = new List&lt;string&gt;();\r\n\r\n      //Traverse the tree\r\n      do\r\n      {\r\n       values.Clear();\r\n       foreach (TreeViewColumn column in treeView.Columns)\r\n       {\r\n        //Only output visible columns\r\n        if (column.Visible)\r\n        {\r\n         //Loop through CellRenderers to make sure we have a CellRendererText\r\n         string value = null;\r\n         column.CellSetCellData(treeView.Model, iter, false, false);\r\n         foreach (CellRenderer renderer in column.CellRenderers)\r\n         {\r\n          CellRendererText text = renderer as CellRendererText;\r\n          if (text != null)\r\n          {\r\n           //Setting value indicates this column had a CellRendererText and should be included\r\n           if (value == null)\r\n           {\r\n            value = String.Empty;\r\n           }\r\n\r\n           //Add the header if the first time through\r\n           if (headers != null)\r\n           {\r\n            headers.Add(column.Title);\r\n           }\r\n\r\n           //Append to the value\r\n           if (text.Text != null)\r\n           {\r\n            value += text.Text;\r\n           }\r\n          }\r\n         }\r\n         if (value != null)\r\n         {\r\n          values.Add(value);\r\n         }\r\n        }\r\n       }\r\n\r\n       //Output the header\r\n       if (headers != null)\r\n       {\r\n        csvWriter.WriteHeaderRecord(headers.ToArray());\r\n        headers = null;\r\n       }\r\n\r\n       //Output the values\r\n       csvWriter.WriteDataRecord(values.ToArray());\r\n      } while (treeView.Model.IterNext(ref iter));\r\n     }\r\n    }\r\n    return true;\r\n   }\r\n   return false;\r\n  }\r\n }\r\n}\r\n</code></pre>\r\n\r\n"},{"Title":"Custom Entity Type Configurations in Entity Framework Code First (Part 2)","Lead":null,"Published":"2013-05-13T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Entity Framework","Entity Framework Code First"],"ViewTypeName":"custom_entity_type_configurations_in_entity_framework_code_first_part_2","Rendered":"\r\n\r\n<p>In <a href=\"/posts/custom-entity-type-configurations-in-entity-framework-code-first-part-1\">my last post</a> I discussed how to inherit from the <code>EntityTypeConfiguration</code> class and use reflection to dynamically configure Entity Framework. In this post I'll expand on that technique by using a custom interface, reflection, and several helper classes to automatically apply Entity Framework configurations from arbitrary classes.</p>\r\n\r\n<p>The first step is to revisit the <code><a href=\"http://msdn.microsoft.com/en-us/library/gg696117(v=vs.103).aspx\">EntityTypeConfiguration&lt;TEntityType&gt;</a></code> that is part of Entity Framework. Recall that by overriding it you can provide your own configurations:</p>\r\n\r\n<pre><code class=\"language-csharp\">public class DepartmentTypeConfiguration : EntityTypeConfiguration&lt;Department&gt;\r\n{\r\n  public DepartmentTypeConfiguration()\r\n  {\r\n    Property(t =&gt; t.Name).IsRequired();\r\n  }\r\n}</code></pre>\r\n\r\n<p>Once you're done, the <code>EntityTypeConfiguration</code> class is registered with the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.data.entity.modelconfiguration.configuration.configurationregistrar(v=vs.103).aspx\">ConfigurationRegistrar</a></code>. One problem with this is that the <code>ConfigurationRegistrar</code> only accepts one <cdoe>EntityTypeConfiguration</cdoe> per type. To get around this, instead of creating derived <cdoe>EntityTypeConfiguration</cdoe> classes we're going to create a custom interface that can be implemented to apply configuration to a common pre-generated <code>EntityTypeConfiguration</code> class per type. This way, even if there are multiple configurations for a given entity type, they'll all get applied to the same <code>EntityTypeConfiguration</code> instance. The first step is defining the interface that our own configuration classes will implement:</p>\r\n\r\n<pre><code class=\"language-csharp\">// This interface is needed to refer to the closed generic without the generic\r\n// type parameter being available\r\npublic interface IEntityTypeConfiguration\r\n{\r\n}\r\n\r\n// Implement this interface to enable dynamic entity configuration \r\npublic interface IEntityTypeConfiguration&lt;TEntity&gt;\r\n  : IEntityTypeConfiguration where TEntity : class\r\n{\r\n  void Configure(EntityTypeConfiguration&lt;TEntity&gt; configuration);\r\n}</code></pre>\r\n\r\n<p>The first non-generic version of the interface is only needed so that we can refer to the implementation without requiring the generic type parameter to be specified. The generic interface is the one that should be implemented to provide entity configuration data. Notice how instead of accessing an <code>EntityTypeConfiguration</code> by inheriting from it, we are now passing it in through the <code>Configure()</code> method. This results in configuration code that looks like:</p>\r\n\r\n<pre><code class=\"language-csharp\">public class Department \r\n{\r\n\r\n  // ... Department entity data goes here\r\n\r\n  // This is our entity configuration code\r\n  // I prefer to use a nested class to keep everything together, but you don't have to\r\n  public class DepartmentTypeConfiguration : IEntityTypeConfiguration&lt;Department&gt;\r\n  {\r\n    void Configure(EntityTypeConfiguration&lt;Department&gt; configuration)\r\n    {\r\n      configuration.Property(t =&gt; t.Name).IsRequired();\r\n    }\r\n  }\r\n}</code></pre>\r\n\r\n<p>The rest of the code that we need is all just rigging code to get this technique to work. The first helper class we'll need allows us to add an <code>EntityTypeConfiguration</code> to the <code>ConfigurationRegistrar</code> without knowing it's generic parameter types. This is needed because <code>ConfigurationRegistrar.Add&lt;TEntity&gt;()</code> is a generic method and otherwise wouldn't let us add an open generic instance. If this isn't making much sense yet, hang in there. Hopefully it will by the time I'm done.</p>\r\n\r\n<pre><code class=\"language-csharp\">// Similar to above, this lets us call AddConfiguration() without knowing the\r\n// generic type parameter\r\npublic interface IAutomaticEntityTypeConfiguration\r\n{\r\n  void AddConfiguration(ConfigurationRegistrar registrar);\r\n}\r\n\r\n// A derived EntityTypeConfiguration that can add itself to the ConfigurationRegistrar\r\npublic class AutomaticEntityTypeConfiguration&lt;TEntity&gt;\r\n  : EntityTypeConfiguration&lt;TEntity&gt;, IAutomaticEntityTypeConfiguration\r\n  where TEntity : class\r\n{\r\n  public AutomaticEntityTypeConfiguration()\r\n  {\r\n  }\r\n\r\n  public void AddConfiguration(ConfigurationRegistrar registrar)\r\n  {\r\n    registrar.Add(this);\r\n  }\r\n}</code></pre>\r\n\r\n<p>Finally, the last class we'll need ties the user code (<code>IEntityTypeConfiguration&lt;TEntity&gt;</code>) and the <code>EntityTypeConfiguration</code> implementation (<code>AutomaticEntityTypeConfiguration&lt;TEntity&gt;</code>) together.</p>\r\n\r\n<pre><code class=\"language-csharp\">public interface IEntityTypeConfigurationAdapter\r\n{\r\n  void Configure(IEntityTypeConfiguration configurationInterface,\r\n    IAutomaticEntityTypeConfiguration configuration);\r\n}\r\n\r\npublic class EntityTypeConfigurationAdapter&lt;TEntity&gt;\r\n  : IEntityTypeConfigurationAdapter where TEntity : class\r\n{\r\n  public void Configure(IEntityTypeConfiguration configurationInterface,\r\n    IAutomaticEntityTypeConfiguration configuration)\r\n  {\r\n    IEntityTypeConfiguration&lt;TEntity&gt; typedConfigurationInterface\r\n      = (IEntityTypeConfiguration&lt;TEntity&gt;)configurationInterface;\r\n    typedConfigurationInterface.Configure((EntityTypeConfiguration&lt;TEntity&gt;)configuration);\r\n  }\r\n}</code></pre>\r\n\r\n<p>Now that we have all of the needed classes defined, I can show you the code I have in my <code>DbContext</code> to find, configure, and register entity type configurations.</p>\r\n\r\n<pre><code class=\"language-csharp\">protected override void OnModelCreating(DbModelBuilder modelBuilder)\r\n{\r\n\r\n  // Get all entity type configurations\r\n    Dictionary&lt;Type, List&lt;IEntityTypeConfiguration&gt;&gt; typeConfigurations\r\n    = GetTypeConfigurations();\r\n\r\n  // Add all the type configurations\r\n  foreach(KeyValuePair&lt;Type, List&lt;IEntityTypeConfiguration&gt;&gt; kvp in typeConfigurations)\r\n  {\r\n    // Create an automatic entity type configurator\r\n    Type configType = typeof(AutomaticEntityTypeConfiguration&lt;&gt;).MakeGenericType(kvp.Key);\r\n    IAutomaticEntityTypeConfiguration configuration\r\n      = (IAutomaticEntityTypeConfiguration)Activator.CreateInstance(configType);\r\n\r\n    // Apply the configurations\r\n    ApplyConfigurations(kvp.Key, kvp.Value, configuration);                \r\n\r\n    // Add the configuration to the registry\r\n    configuration.AddConfiguration(modelBuilder.Configurations);\r\n  }\r\n\r\n}</code></pre>\r\n\r\n<p>The <code>GetTypeConfigurations</code> method uses reflection to scan the same assembly as your <code>DbContext</code>, find all <code>IEntityTypeConfiguration</code> implementers, instantiate them, and record them in a list-per-entity-type. Note that this code uses the <a href=\"/posts/quick-and-dirty-multiple-value-dictionary-using-extension-methods\">AddMulti extension method</a> for working with multi-value dictionaries. You could just as easily expand that part of the code to check if there is already a <code>List&lt;&gt;</code> available and create one if not.</p>\r\n\r\n<pre><code class=\"language-csharp\">private Dictionary&lt;Type, List&lt;IEntityTypeConfiguration&gt;&gt; GetTypeConfigurations()\r\n{  \r\n  Dictionary&lt;Type, List&lt;IEntityTypeConfiguration&gt;&gt; typeConfigurations\r\n    = new Dictionary&lt;Type, List&lt;IEntityTypeConfiguration&gt;&gt;();\r\n  var typesToRegister = Assembly.GetAssembly(typeof(YourDbContext)).GetTypes()\r\n    .Where(type =&gt; type.Namespace != null\r\n      &amp;&amp; type.Namespace.Equals(typeof(YourDbContext).Namespace))\r\n    .Where(type =&gt; type.BaseType.IsGenericType\r\n      &amp;&amp; type.BaseType.GetGenericTypeDefinition() == typeof(IEntityTypeConfiguration&lt;&gt;));\r\n  foreach (var configurationType in typesToRegister)\r\n  {\r\n    IEntityTypeConfiguration configurationInstance\r\n      = (IEntityTypeConfiguration)Activator.CreateInstance(configurationType);\r\n    foreach (Type entityType in configurationType\r\n      .GetGenericInterfaces(typeof(IEntityTypeConfiguration))\r\n      .Select(i =&gt; i.GetGenericArguments()[0]))\r\n      {\r\n        typeConfigurations.AddMulti(entityType, configurationInstance);\r\n      }\r\n   {\r\n}</code></pre>\r\n\r\n<p>You'll also need the following extension method somewhere:</p>\r\n\r\n<pre><code class=\"language-csharp\">// This returns all generic interfaces implemented by a given type that themselves implement a given base interface\r\npublic static IEnumerable&lt;Type&gt; GetGenericInterfaces(this Type type, Type baseInterfaceType)\r\n{\r\n    Validate.That(\r\n        type.IsNot().Null(() =&gt; type),\r\n        baseInterfaceType.IsNot().Null(() =&gt; baseInterfaceType));\r\n    return type.GetInterfaces().Where(i =&gt; i.IsGenericType &amp;&amp; baseInterfaceType.IsAssignableFrom(i));\r\n}</code></pre>\r\n\r\n<p>And finally, the <code>ApplyConfigurations</code> method just uses the <code>EntityTypeConfigurationAdapter</code> to tie the <code>IEntityTypeConfiguration</code> and <code>IAutomaticEntityTypeConfiguration</code> classes together.</p>\r\n\r\n<pre><code class=\"language-csharp\">private void ApplyConfigurations(\r\n  Type entityType,\r\n  IList&lt;IEntityTypeConfiguration&gt; typeConfigurationInterfaces,\r\n  IAutomaticEntityTypeConfiguration configuration)\r\n{\r\n  // Construct an adapter that will help call the typed configuration methods\r\n  Type adapterType = typeof(EntityTypeConfigurationAdapter&lt;&gt;).MakeGenericType(entityType);\r\n  IEntityTypeConfigurationAdapter adapter\r\n    = (IEntityTypeConfigurationAdapter)Activator.CreateInstance(adapterType);\r\n\r\n  // Iterate type configuration interfaces and add to the actual configuration\r\n  foreach (IEntityTypeConfiguration typeConfigurationInterface\r\n    in typeConfigurationInterfaces)\r\n  {\r\n    adapter.Configure(typeConfigurationInterface, configuration);\r\n  }\r\n}</code></pre>\r\n\r\n<p>Phew. That was a lot of code. Hopefully it made some sense. I realize it was pretty deep and might not have gelled just by reading it in blog format. The best advice I can give is that if this seems like a capability you want or need that you copy to code into some source files, get it to compile, and step through it. That should give you a better understanding of how it all fits together.</p>"},{"Title":"Custom Entity Type Configurations in Entity Framework Code First (Part 1)","Lead":null,"Published":"2013-04-17T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Entity Framework","Entity Framework Code First"],"ViewTypeName":"custom_entity_type_configurations_in_entity_framework_code_first_part_1","Rendered":"\r\n\r\n<p>One of the things I really like about Entity Framework Code First is the way you can mix declarative configuration (I.e., by using <a href=\"http://msdn.microsoft.com/en-us/library/dd901590(v=vs.95).aspx\">Data Annotation</a> attributes) with programmatic configuration for more complicated cases (I.e., by using the <a href=\"http://msdn.microsoft.com/en-US/data/jj591617\">fluent API</a>). The one aspect of this that really bothers me though is that in normal usage the fluent API commands end up being placed inside your <code><a href=\"http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext(v=vs.103).aspx\">DbContext</a></code> class removed from your actual entity. If you change some aspect of an entity that uses the fluent API for configuration, you have to remember to go check the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext.onmodelcreating(v=vs.103).aspx\">OnModelCreating()</a></code> method to ensure you don't need to modify the code-based configuration. It would be much better (in my opinion) if all configuration, declarative and programmatic, were located close to the entity and/or encapsulated within it. This article explains one way of accomplishing this.</p>\r\n\r\n<p>The first thing you'll need to understand is the way that the fluent API actually configures entities. Inside of the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext(v=vs.103).aspx\">DbContext</a></code> class (which you've presumably subclassed) there is an overridable method called <code><a href=\"http://msdn.microsoft.com/en-us/library/system.data.entity.dbcontext.onmodelcreating(v=vs.103).aspx\">OnModelCreating()</a></code>. This method has a single parameter of type <code><a href=\"http://msdn.microsoft.com/en-us/library/system.data.entity.dbmodelbuilder(v=vs.103).aspx\">DbModelBuilder</a></code>. During normal fluent API usage you write code that looks like this inside the <code>OnModelCreating()</code> method:</p>\r\n\r\n<pre><code class=\"language-csharp\">modelBuilder.Entity&lt;Department&gt;().Property(t =&gt; t.Name).IsRequired();</code></pre>\r\n\r\n<p>When you call <code><a href=\"http://msdn.microsoft.com/en-us/library/gg696542(v=vs.103).aspx\">DbModelBuilder.Entity&lt;TEntityType&gt;()</a></code>, you get back an <code><a href=\"http://msdn.microsoft.com/en-us/library/gg696117(v=vs.103).aspx\">EntityTypeConfiguration&lt;TEntityType&gt;</a></code> class that is used for configuring the entity. However, this isn't the only way to get an <code>EntityTypeConfiguration</code> class. You can actually create them yourself:</p>\r\n\r\n<pre><code class=\"language-csharp\">public class DepartmentTypeConfiguration : EntityTypeConfiguration&lt;Department&gt;\r\n{\r\n  public DepartmentTypeConfiguration() { }\r\n}</code></pre>\r\n\r\n<p>Once you've instantiated one, you can use it just like you would have used the one you obtained from the <code><a href=\"http://msdn.microsoft.com/en-us/library/gg696542(v=vs.103).aspx\">DbModelBuilder.Entity&lt;TEntityType&gt;()</a></code> call:</p>\r\n\r\n<pre><code class=\"language-csharp\">DepartmentTypeConfiguration departmentConfig = new DepartmentTypeConfiguration();\r\ndepartmentConfig.Property(t =&gt; t.Name).IsRequired();</code></pre>\r\n\r\n<p>The previous example was just to show that the custom <code>EntityTypeConfiguration</code> class works the same way as the ones you obtain by calling <code>DbModelBuilder.Entity&lt;TEntityType&gt;()</code>. Alternatively you can specify configuration code in the constructor, which is more useful because it means the configuration code will get called whenever a new instance of your <code>EntityTypeConfiguration</code> class is created (I.e., through reflection).</p>\r\n\r\n<pre><code class=\"language-csharp\">public class DepartmentTypeConfiguration : EntityTypeConfiguration&lt;Department&gt;\r\n{\r\n  public DepartmentTypeConfiguration()\r\n  {\r\n    Property(t =&gt; t.Name).IsRequired();\r\n  }\r\n}</code></pre>\r\n\r\n<p>The fluent API calls (such as <code>Property()</code>) change the internal state of the <code>EntityTypeConfiguration</code> class. When all of the configuration is complete, Entity Framework reads the state of all <code>EntityTypeConfiguration</code> classes that have been registered and uses them to build the model. But back up a step, notice I said \"all <code>EntityTypeConfiguration</code> classes <em>that have been registered</em>\". There is one more step before a custom <code>EntityTypeConfiguration</code> class can be used for configuration - it has to be registered with the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.data.entity.modelconfiguration.configuration.configurationregistrar(v=vs.103).aspx\">ConfigurationRegistrar</a></code>. To do so, you just use the <code>DbModelBuilder.Configurations</code> property:</p>\r\n\r\n<pre><code class=\"language-csharp\">modelBuilder.Configurations.Add(departmentConfig);</code></pre>\r\n\r\n<p>This adds the custom <code>EntityTypeConfiguration</code> instance to the list of configurations that will be used to build the final model. At this point, we could just reflect over the assembly looking for <code>EntityTypeConfiguration</code> classes, instantiating them, and adding them to the <code>ConfigurationRegistrar</code> (<a href=\"http://areaofinterest.wordpress.com/2010/12/08/dynamically-load-entity-configurations-in-ef-codefirst-ctp5/\">as described by Jonas Cannehag</a>):</p>\r\n\r\n<pre><code class=\"language-csharp\">var typesToRegister = Assembly.GetAssembly(typeof(YourDbContext)).GetTypes()\r\n  .Where(type =&gt; type.Namespace != null\r\n    &amp;&amp; type.Namespace.Equals(typeof(YourDbContext).Namespace))\r\n  .Where(type =&gt; type.BaseType.IsGenericType\r\n    &amp;&amp; type.BaseType.GetGenericTypeDefinition() == typeof(EntityTypeConfiguration&lt;&gt;));\r\n\r\nforeach (var type in typesToRegister)\r\n{\r\n  dynamic configurationInstance = Activator.CreateInstance(type);\r\n  modelBuilder.Configurations.Add(configurationInstance);\r\n}</code></pre>\r\n\r\n<p>This will allow you to create as many custom EntityTypeConfiguration classes as you need for each entity in your model. However, there are some limitations:</p>\r\n\r\n\r\n<ul class=\"p\">\r\n <li>        The <code><a href=\"http://msdn.microsoft.com/en-us/library/gg696203(v=vs.103).aspx\">ConfigurationRegistrar.Add()</a></code> method only allows one <code>EntityTypeConfiguration</code> class per entity type. This may be a problem in complex models if you have some configurations for a given entity spread out in multiple places (for example, you want to place the responsibility of configuring relationships for a given entity near the entities on the other side of the relationships).\r\n</li>\r\n <li>\t    I personally find the idea of placing configuration code inside the constructor of a dedicated class a little awkward. I would prefer to have my custom configurations specified through an interface that I could implement right on the entity, or perhaps use more than once to specify configuration for multiple entities in a single configuration class. That would give more flexibility.\r\n</li>\r\n</ul>\r\n<p>In <a href=\"/posts/custom-entity-type-configurations-in-entity-framework-code-first-part-2\">my next post</a> I'll discuss an alternate method of specifying custom entity type configurations that builds on this technique and addresses these two points.</p>\r\n"},{"Title":"Brace Style Convention","Lead":"Or Why I Prefer My Braces On Their Own Line","Published":"2014-05-21T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["programming","style","conventions"],"ViewTypeName":"brace_style_convention","Rendered":"\r\n\r\n<p>Most C language descendants and variants use braces to indicate scope, and where there is a possibility for variation there will be as many opinions as programmers as to the “correct” way to do things. There has certainly been more than enough written about where to put an opening brace, but I was having a discussion on this topic recently and just couldn’t resist adding my opinion to the noise.</p>\r\n\r\n<p>First, let’s review the various conventions. <a href=\"http://en.wikipedia.org/wiki/Indent_style\">There are a bunch</a>, but they generally boil down into the following three categories:</p>\r\n\r\n<h1>Same Line</h1>\r\n\r\n<p>This style puts the opening brace for a class, method, etc. on the same line as the statement that starts the new scope. The closing brace goes on it’s own line at the same indent level as the opening statement.</p>\r\n\r\n<pre><code class=\"language-csharp\">class MyClass {\r\n    int var = 0;\r\n\r\n    public MyMethod(int arg) {\r\n        arg = arg + 2;\r\n        if(arg == 4) {\r\n            DoSomething(arg);\r\n        }\r\n        DoSomethingElse(arg);\r\n    }\r\n}</code></pre>\r\n\r\n<h1>New Line</h1>\r\n\r\n<p>In this style, the opening brace always goes on it’s own line at the same indent level as the statement that starts the new scope.</p>\r\n\r\n<pre><code class=\"language-csharp\">class MyClass\r\n{\r\n    int var = 0;\r\n\r\n    public MyMethod(int arg)\r\n    {\r\n        arg = arg + 2;\r\n        if(arg == 4)\r\n        {\r\n            DoSomething(arg);\r\n        }\r\n        DoSomethingElse(arg);\r\n    }\r\n}</code></pre>\r\n\r\n<h1>Hybrid</h1>\r\n\r\n<p>Many conventions mix the two styles above based on circumstance. For example, braces that open a class or method go on a new line while interior braces such as for loops or conditionals go on the same line.</p>\r\n\r\n<h1>My Preference</h1>\r\n\r\n<p>With that out of the way, which style do I prefer? I lean very heavily towards always putting the braces on their own line, regardless of situation. I have a couple of reasons for this. One, I don’t find modern monitors or development environments to be cramped or hurting for space. The loss of a line every now and then to a brace doesn’t really impact my ability to gain a big-picture view of the code I’m looking at. I also tend to dismiss the hybrid approaches because I don’t want to have to remember which situation is which when I’m writing code. The meaning of a brace (to indicate scope) is generally universal and so I think it’s usage should be too.</p>\r\n\r\n<p>I do see real readability benefits to putting the brace on it’s own line. For starters, I find the brace symmetry to be easier on my eyes and easier to skim. When I’m quickly scanning a file with 2,000 lines of code and I need to get a handle on the structure, that symmetry really helps me form a mental image of how things line up. Perhaps more importantly though is the white space the opening brace leaves. By creating an essentially blank line both before and after the code within a given scope, the body is set apart and becomes it’s own unit. I know some folks say that indenting/spacing serves the same purpose, but I just don’t get a quick an impression without that near emptiness in the code file.</p>\r\n\r\n<p>So is my way the right way? It’s worth noting that there is no right or wrong answer to where your braces should go. While the question seems to elicit the same responses from programmers as if you were questioning their mother’s monogamy, the really important thing to remember is to always be consistent. I can’t stress this enough. If you’re on a team and you like one style but the team as adopted a different one, guess what? You’re going to have to change your ways. Consistency in code is one of the best ways to ensure everyone working on a large code base can reach optimal understanding in a minimum amount of time.</p>"},{"Title":"Automatically Generating Column Titles For A KendoUI MVC Grid","Lead":null,"Published":"2013-04-11T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["ASPNET","ASPNET MVC","KendoUI","KendoUI MVC","grid","data annotations"],"ViewTypeName":"automatically_generating_column_titles_for_a_kendoui_mvc_grid","Rendered":"\r\n\r\n<p>I love KendoUI, especially because of the available MVC wrappers. It is a very well engineered product with lots of opportunity for extension, and in this post I'll briefly discuss one that should relieve a small pain point: generating grid column titles from a <code><a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.displayattribute.aspx\">DisplayAttribute</a></code> <a href=\"http://msdn.microsoft.com/en-us/library/dd901590(v=vs.95).aspx\">data annotation</a>. As you probably already know, you can change the way your UI layer presents properties of your model by applying the <code>DisplayAttribute</code> data annotation. This causes most of the UI code to use the <code>Name</code> property of the attribute when displaying that property. It looks like this:</p>\r\n\r\n<pre><code class=\"language-csharp\">[Display(Name = \"The Product!\")]\r\npublic string ProductName { get; set; }</code></pre>\r\n\r\n<p>Until recently, KendoUI would not recognize the <code>DisplayAttribute</code> applied to a bound column. However, before I go much further, it's worth noting that this is no longer the case. I waited too long to post this article and KendoUI already gets the column title from a <code>DisplayAttribute</code> data annotation if there is one. I am posting this anyway because the technique could be generalized to other ways of customizing the grid by using an extension method.</p>\r\n\r\n<p>Now, let's say we have a KendoUI grid declared in Razor using the MVC wrappers (this is from their demo page):</p>\r\n\r\n<pre><code class=\"language-csharp\">@model IEnumerable&lt;Kendo.Mvc.Examples.Models.ProductViewModel&gt;\r\n\r\n@(Html.Kendo().Grid(Model)    \r\n    .Name(\"Grid\")\r\n    .Columns(columns =&gt;\r\n    {\r\n        columns.Bound(p =&gt; p.ProductID);\r\n        columns.Bound(p =&gt; p.ProductName);\r\n    })\r\n    .DataSource(dataSource =&gt; dataSource\r\n        .Ajax().Read(read =&gt; read.Action(\"Products_Read\", \"Grid\"))\r\n    )\r\n)</code></pre>\r\n\r\n<p>When displaying the column titles, KendoUI will use the name of the property to generate the name of the column. In the example above, you will get two columns named \"Product ID\" and \"Product Name\" (Kendo is smart enough to add the spaces in between the capital letters). But what if we wanted our second column to be named \"The Product!\" as in the example application of <code>DisplayAttribute</code> above? We could add the title explicitly using the <code>Title()</code> extension method:</p>\r\n\r\n<pre><code class=\"language-csharp\">...\r\ncolumns.Bound(p =&gt; p.ProductName).Title(\"The Product!\");\r\n...</code></pre>\r\n\r\n<p>But this violates the <a href=\"http://en.wikipedia.org/wiki/Don't_repeat_yourself\">DRY principle</a>. If you want to change the title in the future, you'll need to remember to change it in both places. What would be better is if we could write something like:</p>\r\n\r\n<pre><code class=\"language-csharp\">...\r\ncolumns.Bound(p =&gt; p.ProductName).DisplayNameTitle();\r\n...</code></pre>\r\n\r\n<p>This would indicate to the grid that the title should be set by getting a <code>DisplayAttribute</code> <code>Name</code> property (if there is one) and using the normal name generation otherwise. The code for such an extension method is below:</p>\r\n\r\n<pre><code class=\"language-csharp\">public static GridBoundColumnBuilder&lt;TModel&gt; DisplayNameTitle&lt;TModel&gt;(\r\n    this GridBoundColumnBuilder&lt;TModel&gt; builder) where TModel : class, new()\r\n{\r\n    // Create an adapter to access the typed grid column\r\n    // (which contains the Expression)\r\n    Type adapterType = typeof(GridBoundColumnAdapter&lt;,&gt;)\r\n        .MakeGenericType(typeof(TModel), builder.Column.MemberType);\r\n    IGridBoundColumnAdapter adapter =\r\n        (IGridBoundColumnAdapter)Activator.CreateInstance(adapterType);\r\n\r\n    // Use the adapter to get the title and set it\r\n    return builder.Title(adapter.GetDisplayName(builder.Column));\r\n}\r\n\r\nprivate interface IGridBoundColumnAdapter\r\n{\r\n    string GetDisplayName(IGridBoundColumn column);\r\n}\r\n\r\nprivate class GridBoundColumnAdapter&lt;TModel, TValue&gt;\r\n    : IGridBoundColumnAdapter where TModel : class, new()\r\n{\r\n    public string GetDisplayName(IGridBoundColumn column)\r\n    {\r\n        // Get the typed bound column\r\n        GridBoundColumn&lt;TModel, TValue&gt; boundColumn =\r\n            column as GridBoundColumn&lt;TModel, TValue&gt;;\r\n        if (boundColumn == null) return String.Empty;\r\n\r\n        // Create the appropriate HtmlHelper and use it to get the display name\r\n        HtmlHelper&lt;TModel&gt; helper = HtmlHelpers.For&lt;TModel&gt;(\r\n            boundColumn.Grid.ViewContext,\r\n            boundColumn.Grid.ViewData,\r\n            new RouteCollection());\r\n        return helper.DisplayNameFor(boundColumn.Expression).ToString();\r\n    }\r\n}</code></pre>\r\n\r\n<p>So let's look at this code a little more closely. The first <code>DisplayNameTitle&lt;TModel&gt;()</code> method is the actual extension. It takes a <code>GridBoundColumnBuilder&lt;TModel&gt;</code> because that's what the <code>Bound()</code> method returns as part of the KendoUI MVC fluent interface for column specifications. The <code>DisplayNameTitle</code> extension method creates an instance of an adapter class that can be used to manipulate the grid column. Because the KendoUI MVC classes are strongly typed, we need to use reflection to create an adapter with the proper generic type parameters. The key to this working is that the adapter class implements the non-generic <code>IGridBoundColumnAdapter</code> interface, which means that by casting the reflection-generated generic adapter class to the interface we can call non-generic methods that have access to the generic type parameters we used during the reflected construction in the actual implementation of the method.</p>\r\n\r\n<p>The real work gets done inside the <code>GetDisplayName()</code> implementation. This method <a href=\"/posts/getting-an-htmlhelper-for-an-alternate-model-type\">creates an&#160;appropriately&#160;typed HtmlHelper</a> and then uses it to call the <code>HtmlHelper.DisplayNameFor()</code> extension method. This ensures that our own <code>DisplayNameTitle()</code> extension will always return the exact same title that would be returned if we used the normal MVC <code>HtmlHelper</code> methods to display the property.</p>\r\n\r\n<p>This technique could be used to add other extensions to the KendoUI column building fluent interface as well. For example, you could automatically make a column sortable or not based on the data type.</p>\r\n"}]