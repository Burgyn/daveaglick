[{"Title":"XQuery Function To Get The Number Of Week/Work Days","Lead":null,"Published":"2010-06-17T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["XML","XQuery","networkdays","weekdays"],"ViewTypeName":"xquery_function_to_get_the_number_of_week_work_days","Rendered":"\r\n\r\n<p>Today's post is an XQuery function designed to get a count of the number of week (or work) days between two dates. It's designed to mimic the Excel <code>NETWORKDAYS</code> function. I got the algorithm from Bernal Schooley in this <a href=\"http://www.eggheadcafe.com/community/aspnet/2/44982/how-to-calculate-num-of-w.aspx\">thread</a> and then adapted it to XQuery. It also makes use of the <a href=\"http://www.xqueryfunctions.com/\">FunctX</a> <code><a href=\"http://www.xqueryfunctions.com/xq/functx_day-of-week.html\">day-of-week</a></code> function, so if you have FunctX functions already referenced you can take that part out.</p>\r\n\r\n<pre><code>declare namespace functx = \"http://www.functx.com\";\r\n\r\ndeclare function functx:day-of-week\r\n ($date as xs:anyAtomicType?) as xs:integer? {\r\n if (empty($date))\r\n then ()\r\n else\r\n  xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7\r\n};\r\n\r\ndeclare function local:weekdays\r\n ($start as xs:anyAtomicType?, $end as xs:anyAtomicType?) as xs:integer? {\r\n if(empty($start) or empty($end))\r\n then()\r\n else\r\n  if($start > $end)\r\n  then -local:weekdays($end, $start)\r\n  else\r\n   let $dayOfWeekStart := functx:day-of-week($start)\r\n   let $dayOfWeekEnd := functx:day-of-week($end)\r\n   let $adjDayOfWeekStart := if($dayOfWeekStart = 0) then 7 else $dayOfWeekStart\r\n   let $adjDayOfWeekEnd := if($dayOfWeekEnd = 0) then 7 else $dayOfWeekEnd\r\n   return\r\n    if($adjDayOfWeekStart <= $adjDayOfWeekEnd)\r\n    then xs:integer((xs:integer(days-from-duration(xs:date($end) - xs:date($start)) div 7) * 5)\r\n     + max(((min((($adjDayOfWeekEnd + 1), 6)) - $adjDayOfWeekStart), 0)))\r\n    else xs:integer((xs:integer(days-from-duration(xs:date($end) - xs:date($start)) div 7) * 5)\r\n     + min((($adjDayOfWeekEnd + 6) - min(($adjDayOfWeekStart, 6)), 5)))\r\n};</code></pre>\r\n<p>Usage: <code>local:weekdays('2009-06-01', '2010-06-30')</code></p>\r\n"},{"Title":"Right-Click Context Menus In GtkSharp","Lead":null,"Published":"2010-04-12T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Mono","GtkSharp","ButtonPressEvent","Context Menu","ContextMenuHelper","Menu","Popup","Popup Menu"],"ViewTypeName":"right_click_context_menus_in_gtksharp","Rendered":"\r\n\r\n<p>To show a context menu in GtkSharp (or \"popup\" as they're called in Gtk land), you would normally add an event handler for Widget.PopupMenu, create or use a Menu instance, and then call Menu.Popup. The only problem is that for many widgets, the right-click doesn't trigger the Widget.PopupMenu event. This is fine for systems where there is no right mouse button or where a right-click isn't the customary way of initiating context menus. However, on systems where there is a user expectation that the way to open a context menu is through a right-click (such as Windows), we need some way to trigger one.</p>\r\n<p>The situation is complicated a little bit by the existing behavior of Widget.PopupMenu. According to the <a href=\"http://library.gnome.org/devel/gtk/unstable/gtk-migrating-checklist.html#checklist-popup-menu\">Gtk manual</a>, \"By default, the key binding mechanism is set to emit this signal when the Shift+F10 or Menu keys are pressed while a widget has the focus.\" There is a recommendation in the manual that if a developer wants context menus on right-click they should handle the Widget.ButtonPressEvent, listen for the appropriate clicks, and launch the menu using the Menu.Popup method. This is all fine except that now you've got two things to listen to to get proper context menu handling: Widget.PopupMenu and Widget.ButtonPressEvent. It would be nice if there were just one event to handle that got raised anytime a context menu needed to be displayed.</p>\r\n<p>The following class does just that. You can \"attach\" it to any Widget and it will listen for the Widget.PopupMenu event to work with the default context menu handling and the Widget.ButtonPressEvent to also work with right-clicks. When either of these occur, it will first propagate the event through to the underlying Widget (in case there are other things that are supposed to be triggered by whatever event caused the context menu) and then raise a ContextMenuHelper.ContextMenu event that you can handle and use to display the context menu regardless of what triggered it. This method should ensure proper event handling and ordering while reducing duplication of code by enabling a single event for context menu handling.</p>\r\n\r\n<pre><code class=\"language-csharp\">using System;\r\nusing Gdk;\r\nusing GLib;\r\nusing Gtk;\r\n\r\nnamespace Somedave\r\n{\r\n public class ContextMenuEventArgs : EventArgs\r\n {\r\n  private Widget widget;\r\n  public Widget Widget { get { return widget; } }\r\n\r\n  private bool rightClick;\r\n  public bool RightClick { get { return rightClick; } }\r\n\r\n  public ContextMenuEventArgs(Widget widget, bool rightClick)\r\n  {\r\n   this.widget = widget;\r\n   this.rightClick = rightClick;\r\n  }\r\n }\r\n\r\n public class ContextMenuHelper\r\n {\r\n  public event EventHandler&lt;ContextMenuEventArgs&gt; ContextMenu;\r\n\r\n  public ContextMenuHelper()\r\n  {}\r\n\r\n  public ContextMenuHelper(Widget widget)\r\n  {\r\n   AttachToWidget(widget);\r\n  }\r\n\r\n  public ContextMenuHelper(Widget widget, EventHandler handler)\r\n  {\r\n   AttachToWidget(widget);\r\n   ContextMenu += handler;\r\n  }\r\n\r\n  public void AttachToWidget(Widget widget)\r\n  {\r\n   widget.PopupMenu += Widget_PopupMenu;\r\n   widget.ButtonPressEvent += Widget_ButtonPressEvent;\r\n  }\r\n\r\n  public void DetachFromWidget(Widget widget)\r\n  {\r\n   widget.PopupMenu -= Widget_PopupMenu;\r\n   widget.ButtonPressEvent -= Widget_ButtonPressEvent;\r\n  }\r\n\r\n  [GLib.ConnectBefore]\r\n  private void Widget_PopupMenu(object o, PopupMenuArgs args)\r\n  {\r\n   RaiseContextMenuEvent(args, (Widget)o, false);\r\n  }\r\n\r\n  [GLib.ConnectBefore]\r\n  private void Widget_ButtonPressEvent(object o, ButtonPressEventArgs args)\r\n  {\r\n   if (args.Event.Button == 3 &amp;&amp; args.Event.Type == EventType.ButtonPress)\r\n   {\r\n    RaiseContextMenuEvent(args, (Widget)o, true);\r\n   }\r\n  }\r\n\r\n  private bool propagating = false;   //Prevent reentry\r\n\r\n  private void RaiseContextMenuEvent(SignalArgs signalArgs, Widget widget, bool rightClick)\r\n  {\r\n   if (!propagating)\r\n   {\r\n    //Propagate the event\r\n    Event evnt = Gtk.Global.CurrentEvent;\r\n    propagating = true;\r\n    Gtk.Global.PropagateEvent(widget, evnt);\r\n    propagating = false;\r\n    signalArgs.RetVal = true;     //The widget already processed the event in the propagation\r\n\r\n    //Raise the context menu event\r\n    ContextMenuEventArgs args = new ContextMenuEventArgs(widget, rightClick);\r\n    if (ContextMenu != null)\r\n    {\r\n     ContextMenu.Invoke(this, args);\r\n    }\r\n   }\r\n  }\r\n }\r\n}\r\n</code></pre>"},{"Title":"Nested Grabs In GtkSharp","Lead":null,"Published":"2010-04-15T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Mono","GtkSharp"],"ViewTypeName":"nested_grabs_in_gtksharp","Rendered":"\r\n\r\n<p>I ran across this while working on some complex GtkSharp grabbing behavior to mimic window focusing for a docking framework. Turns out there is a weird inconsistency in the way Gtk+ manages the grab stack. While the list of grabbed Widgets is indeed a stack, a flag on each Widget (<code>Widget.HasGrab</code>) is used to check if a Widget has the grab or not. The problem is that <code>Grab.Add</code> (which calls the Gtk+ method <code><a href=\"http://library.gnome.org/devel/gtk/stable/gtk-General.html#gtk-grab-add\">gtk_grab_add</a></code>) never clears the flag for the currently grabbed Widget if you're nesting grabs. That means that <em>every Widget in the grab stack</em> will have <code>Widget.HasGrab</code> set to true. If you try to add a Widget to the grab stack and it's already in the stack (even if there are multiple other grabbed Widgets after it in the stack), it won't get added. Because the flag is set though, it <em>will</em> get removed at the first place it was in the stack on a call to <code>Grab.Remove</code> (<code><a href=\"http://library.gnome.org/devel/gtk/stable/gtk-General.html#gtk-grab-remove\">gtk_grab_remove</a></code>).</p>\r\n\r\n<p>While it may not be a bug, this is certainly odd behavior. The solution (at least for me) was to write two small utility methods. <code>SafeAdd</code> first removes the <code>Widget.HasGrab</code> flag to ensure that the Widget always gets added to the grab stack, regardless of if it's previously in it. <code>SafeAdd</code> should be paired with <code>SafeRemove</code> which checks the newly grabbed Widget after removing one to make sure it still has the <code>Widget.HasGrab</code> flag set. Note that it doesn't clear the <code>Widget.HasGrab</code> flag for grabbed Widget getting replaced by a new grabbed Widget on the grab stack as you might expect. This maintains compatibility with all the other Gtk code that might be expecting Widgets anywhere in the stack to have the flag set.</p>\r\n\r\n<pre><code class=\"language-csharp\">public static void SafeAdd(Widget widget)\r\n{\r\n if (widget == null)\r\n {\r\n  throw new ArgumentNullException(\"widget\");\r\n }\r\n if (widget.Sensitive)\r\n {\r\n  widget.ClearFlag(WidgetFlags.HasGrab);\r\n  Grab.Add(widget);\r\n }\r\n}\r\n\r\npublic static void SafeRemove(Widget widget)\r\n{\r\n if (widget == null)\r\n {\r\n  throw new ArgumentNullException(\"widget\");\r\n }\r\n Grab.Remove(widget);\r\n Widget current = Grab.Current;\r\n if( current != null && !current.HasGrab )\r\n {\r\n  current.SetFlag(WidgetFlags.HasGrab);\r\n }\r\n}</code></pre>\r\n"},{"Title":"Introducing NiceThreads","Lead":"A threading utility library designed to make different threading primitives easier to use.","Published":"2012-02-17T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["NiceThreads","Threading","Monitor","ReaderWriterLockSlim","locking","ILocker"],"ViewTypeName":"introducing_nicethreads","Rendered":"\r\n\r\n<p>NiceThreads is threading utility library designed to make different threading primitives easier to use with a more consistent API. It started out of frustration with the different options (and more specifically, the different APIs) for enabling thread safety and locks in the .NET framework and how much code was required to use some of them. NiceThreads provides a consistent interface for standard <code><a href=\"http://msdn.microsoft.com/en-us/library/system.threading.monitor.aspx\">Monitor</a></code> locks and the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.threading.readerwriterlockslim.aspx\">ReaderWriterLockSlim</a></code> class (and possibly others in the future). It also provides support for activating and deactivating these locking primitives through the <a href=\"http://msdn.microsoft.com/en-us/library/system.idisposable.aspx\">disposable pattern</a>. Finally, it provides wrappers that can easily provide thread-safety to unsafe objects.</p>\r\n<h1>Common API</h1>\r\n<p>Both <code>Monitor</code> (and the \"lock\" statement which is syntactic sugar for <code>Monitor</code>) and <code>ReaderWriterLockSlim</code> attempt to solve the same problem: preventing conflicting concurrent access to objects that might need to be read or written to by multiple threads. They both do this by limiting access to the object to one thread at a time (or in the case of read locks provided by <code>ReaderWriterLockSlim</code>, only to threads that signal they want read-only access) while making other threads wait their turn. However, even though both classes provide similar functionality they are intended for different uses and have <a href=\"http://blogs.msdn.com/b/pedram/archive/2007/10/07/a-performance-comparison-of-readerwriterlockslim-with-readerwriterlock.aspx\">different tradeoffs</a>. Further, they use similar but different APIs making switching between them difficult.</p>\r\n<p>To solve this problem, NiceThreads provides a consistent ILocker interface that has implementations wrapping both classes and provides a consistent API. The rest of NiceThreads is designed to interact with <code>ILocker</code> allowing interchangeable use of the different types of locking primitives. In addition, the <code>ILocker</code> interface can be used directly to provide a consistent wrapper around either locking class for your own code.</p>\r\n<p>For example:</p>\r\n<pre><code class=\"language-csharp\">ILocker locker = new ReaderWriterLockSlimLocker();\r\nlocker.EnterReadLock();\r\n// Do work...\r\nlocker.ExitReadLock();\r\nlocker = new MonitorLocker();\r\nlocker.EnterReadLock();\r\n// Do work...\r\nlocker.ExitReadLock();</code></pre>\r\n<h1>Disposable Pattern</h1>\r\n<p>Both locking primitives require explicitly activating the lock and subsequently manually removing the lock when finished. This can lead to problems if the developer forgets to release the lock or ends up exiting the normal program flow (for example, because an exception was thrown). The <code>lock</code> keyword in C# attempts to make this design easier to use for the <code>Monitor</code> class by abstracting <code>Monitor</code> instantiation and surrounding it's use in a control block, however, no such keyword exists for other locking classes such as <code>ReaderWriterLockSlim</code>. In addition, using the <code>lock</code> keyword means some control is lost over the lifecycle and usage of the underlying <code>Monitor</code> class.</p>\r\n<p>NiceThreads attempts to solve this problem by providing a set of classes that implement <code>IDisposable</code> and wraps an underlying <code>ILocker</code> (which in turn provides consistent access to alternate framework locking classes). They activate the requested lock type on instantiation and free it on disposal. This allows the developer to use the built-in support for the disposable pattern in .NET to automatically free a lock when finished with it by using the <code>using</code> statement.</p>\r\n<p>For example:</p>\r\n<pre><code class=\"language-csharp\">ILocker locker = new ReaderWriterLockSlimLocker();\r\nusing(new ReadLock(locker))\r\n{\r\n  // Do work...\r\n}</code></pre>\r\n<h1>Thread-Safe Wrappers</h1>\r\n<p>Even with the added convenience of a consistent API and disposable pattern support, implementing thread-safety for non-thread-safe objects can still require a fair amount of code. For every object that needs to be protected, a new locking object potentially needs to be created and maintained. NiceThreads helps implement thread safety for objects by providing wrapper classes that encapsulate generic locking logic and provide thread-safe access to their underlying object. <code>SyncObject&lt;T&gt;</code> wraps an arbitrary type and <code>ReadOnlySyncObject&lt;T&gt;</code> wraps an arbitrary type while providing \"readonly\" semantics (I.e., once the <code>ReadOnlySyncObject&lt;T&gt;</code> has been constructed, it's underlying object cannot be changed). These classes provide a variety of methods to expose their wrapped object in thread-safe ways including thread-safe getting and setting, disposable pattern access, and action/function providers (I.e., lambdas or anonymous methods).</p>\r\n<p>For example:</p>\r\n<pre><code class=\"language-csharp\">SyncObject&lt;int&gt; num = new SyncObject&lt;int&gt;(10);\r\nnum.Sync = 20; // Access as a property with a thread-safe setter\r\nint value = num.Sync; // Access as a property with a thread-safe getter\r\nusing(num.WriteLock())\r\n{\r\n // We can now access using unsafe code\r\n num.UnsyncField++; // Provides direct field access\r\n value = num.Unsync; // Access as a property with an unsafe getter\r\n}\r\nnum.DoWrite(n => n + 10); // Thread-safe write with an Action\r\nvalue = num.DoRead(n => n + 100); // Thread-safe read with a Func\r\n</code></pre>\r\n<h1>Obtaining</h1>\r\n<p>NiceThreads is open source and released under the Apache 2.0 license. It can be obtained here: <a href=\"https://github.com/somedave/NiceThreads\">https://github.com/somedave/NiceThreads</a></p>\r\n"},{"Title":"Exporting a GtkSharp TreeView to CSV","Lead":"All packaged up in nice little utility methods.","Published":"2010-04-09T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Mono","GtkSharp","CellRenderer","CSV","TreeModel","TreeView","TreeViewColumn"],"ViewTypeName":"exporting_a_gtksharp_treeview_to_csv","Rendered":"\r\n\r\n<p>I recently had to create some functionality to export a TreeView widget to a CSV file for further analysis. Since I tend to think about generic behavior, I decided to code up a method that would take any arbitrary TreeView and perform the export operation. Luckily, the TreeView widget and the attached TreeModel both contain a lot of functionality for accessing the data and it's presentation. I decided that I wanted the exported CSV file to represent the perspective of the model as currently represented in the TreeView including column visibility and sort order. This led to the trickiest part of the process. Because a CellRenderer can be customized using cell data functions (such as those added by a call to TreeViewColumn.SetCellDataFunc), I had to pull the content to export from the CellRenderer as opposed to pulling directly from the TreeModel. Turns out there's a method to take the TreeIter from a TreeModel and apply it to all the CellRenderers in a given TreeViewColumn. Since I really only care about textual content, I decided to only export those columns that contain CellRendererText renderers.</p>\r\n<p>After working out the algorithm to fetch what needed to be exported I thought I was ready to roll. Turns out that the CSV pseudo-standard is pretty complex though (the RFC is <a href=\"http://www.rfc-editor.org/rfc/rfc4180.txt\">here</a>), and I quickly got bogged down in writing all kinds of special cases for escaping, quoting, etc. Thankfully, someone else had already been down this road and I was able to find the excellent <a href=\"http://kbcsv.codeplex.com/\">KBCsv</a> library which will write and read formatted CSV files. My only complaint was that it used another utility library purely for convenience in exception generation and null checking (I already use a ton of libraries in our application and I'd prefer not to add any unnecessarily). I replaced the calls to the utility library with the language equivalents, but that's totally a personal preference.</p>\r\n<p>Without further adieu, I present the <code>TreeViewHelper.ExportToCsv</code> and <code>TreeViewHelper.ExportToCsvFile</code> methods...</p>\r\n<pre><code class=\"language-csharp\">using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing Gtk;\r\nusing Kent.Boogaart.KBCsv;\r\n\r\nnamespace Somedave\r\n{\r\n public static class TreeViewHelper\r\n {\r\n  public static bool ExportToCsv(TreeView treeView, Window parent)\r\n  {\r\n   FileChooserDialog fcd = new FileChooserDialog(\"Export File\", parent, FileChooserAction.Save,\r\n   \"Cancel\", ResponseType.Cancel, \"Export\", ResponseType.Accept);\r\n   fcd.DoOverwriteConfirmation = true;\r\n   FileFilter filter = new FileFilter { Name = \"CSV File\" };\r\n   filter.AddPattern(\"*.csv\");\r\n   fcd.AddFilter(filter);\r\n   if (fcd.Run() == (int)ResponseType.Accept)\r\n   {\r\n    string path = fcd.Filename;\r\n    fcd.Destroy();\r\n    return ExportToCsvFile(treeView, path);\r\n   }\r\n   fcd.Destroy();\r\n   return false;\r\n  }\r\n\r\n  public static bool ExportToCsvFile(TreeView treeView, string path)\r\n  {\r\n   //Get the iterator\r\n   TreeIter iter;\r\n   if (treeView.Model.GetIterFirst(out iter))\r\n   {\r\n    //Create the stream\r\n    using (StreamWriter streamWriter = new StreamWriter(path, false))\r\n    {\r\n     //Create the CSV writer\r\n     using (CsvWriter csvWriter = new CsvWriter(streamWriter))\r\n     {\r\n      List&lt;string&gt; headers = new List&lt;string&gt;();\r\n      List&lt;string&gt; values = new List&lt;string&gt;();\r\n\r\n      //Traverse the tree\r\n      do\r\n      {\r\n       values.Clear();\r\n       foreach (TreeViewColumn column in treeView.Columns)\r\n       {\r\n        //Only output visible columns\r\n        if (column.Visible)\r\n        {\r\n         //Loop through CellRenderers to make sure we have a CellRendererText\r\n         string value = null;\r\n         column.CellSetCellData(treeView.Model, iter, false, false);\r\n         foreach (CellRenderer renderer in column.CellRenderers)\r\n         {\r\n          CellRendererText text = renderer as CellRendererText;\r\n          if (text != null)\r\n          {\r\n           //Setting value indicates this column had a CellRendererText and should be included\r\n           if (value == null)\r\n           {\r\n            value = String.Empty;\r\n           }\r\n\r\n           //Add the header if the first time through\r\n           if (headers != null)\r\n           {\r\n            headers.Add(column.Title);\r\n           }\r\n\r\n           //Append to the value\r\n           if (text.Text != null)\r\n           {\r\n            value += text.Text;\r\n           }\r\n          }\r\n         }\r\n         if (value != null)\r\n         {\r\n          values.Add(value);\r\n         }\r\n        }\r\n       }\r\n\r\n       //Output the header\r\n       if (headers != null)\r\n       {\r\n        csvWriter.WriteHeaderRecord(headers.ToArray());\r\n        headers = null;\r\n       }\r\n\r\n       //Output the values\r\n       csvWriter.WriteDataRecord(values.ToArray());\r\n      } while (treeView.Model.IterNext(ref iter));\r\n     }\r\n    }\r\n    return true;\r\n   }\r\n   return false;\r\n  }\r\n }\r\n}\r\n</code></pre>\r\n\r\n"}]