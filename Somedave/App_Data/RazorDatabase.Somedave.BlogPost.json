[{"Title":"XQuery Function To Get The Number Of Week/Work Days","Lead":null,"Published":"2010-06-17T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["XML","XQuery","networkdays","weekdays"],"ViewTypeName":"xquery_function_to_get_the_number_of_week_work_days","Rendered":"\r\n\r\n<p>Today's post is an XQuery function designed to get a count of the number of week (or work) days between two dates. It's designed to mimic the Excel <code>NETWORKDAYS</code> function. I got the algorithm from Bernal Schooley in this <a href=\"http://www.eggheadcafe.com/community/aspnet/2/44982/how-to-calculate-num-of-w.aspx\">thread</a> and then adapted it to XQuery. It also makes use of the <a href=\"http://www.xqueryfunctions.com/\">FunctX</a> <code><a href=\"http://www.xqueryfunctions.com/xq/functx_day-of-week.html\">day-of-week</a></code> function, so if you have FunctX functions already referenced you can take that part out.</p>\r\n\r\n<pre><code>declare namespace functx = \"http://www.functx.com\";\r\n\r\ndeclare function functx:day-of-week\r\n ($date as xs:anyAtomicType?) as xs:integer? {\r\n if (empty($date))\r\n then ()\r\n else\r\n  xs:integer((xs:date($date) - xs:date('1901-01-06')) div xs:dayTimeDuration('P1D')) mod 7\r\n};\r\n\r\ndeclare function local:weekdays\r\n ($start as xs:anyAtomicType?, $end as xs:anyAtomicType?) as xs:integer? {\r\n if(empty($start) or empty($end))\r\n then()\r\n else\r\n  if($start > $end)\r\n  then -local:weekdays($end, $start)\r\n  else\r\n   let $dayOfWeekStart := functx:day-of-week($start)\r\n   let $dayOfWeekEnd := functx:day-of-week($end)\r\n   let $adjDayOfWeekStart := if($dayOfWeekStart = 0) then 7 else $dayOfWeekStart\r\n   let $adjDayOfWeekEnd := if($dayOfWeekEnd = 0) then 7 else $dayOfWeekEnd\r\n   return\r\n    if($adjDayOfWeekStart <= $adjDayOfWeekEnd)\r\n    then xs:integer((xs:integer(days-from-duration(xs:date($end) - xs:date($start)) div 7) * 5)\r\n     + max(((min((($adjDayOfWeekEnd + 1), 6)) - $adjDayOfWeekStart), 0)))\r\n    else xs:integer((xs:integer(days-from-duration(xs:date($end) - xs:date($start)) div 7) * 5)\r\n     + min((($adjDayOfWeekEnd + 6) - min(($adjDayOfWeekStart, 6)), 5)))\r\n};</code></pre>\r\n<p>Usage: <code>local:weekdays('2009-06-01', '2010-06-30')</code></p>\r\n"},{"Title":"Right-Click Context Menus In GtkSharp","Lead":null,"Published":"2010-04-12T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Mono","GtkSharp","ButtonPressEvent","Context Menu","ContextMenuHelper","Menu","Popup","Popup Menu"],"ViewTypeName":"right_click_context_menus_in_gtksharp","Rendered":"\r\n\r\n<p>To show a context menu in GtkSharp (or \"popup\" as they're called in Gtk land), you would normally add an event handler for Widget.PopupMenu, create or use a Menu instance, and then call Menu.Popup. The only problem is that for many widgets, the right-click doesn't trigger the Widget.PopupMenu event. This is fine for systems where there is no right mouse button or where a right-click isn't the customary way of initiating context menus. However, on systems where there is a user expectation that the way to open a context menu is through a right-click (such as Windows), we need some way to trigger one.</p>\r\n<p>The situation is complicated a little bit by the existing behavior of Widget.PopupMenu. According to the <a href=\"http://library.gnome.org/devel/gtk/unstable/gtk-migrating-checklist.html#checklist-popup-menu\">Gtk manual</a>, \"By default, the key binding mechanism is set to emit this signal when the Shift+F10 or Menu keys are pressed while a widget has the focus.\" There is a recommendation in the manual that if a developer wants context menus on right-click they should handle the Widget.ButtonPressEvent, listen for the appropriate clicks, and launch the menu using the Menu.Popup method. This is all fine except that now you've got two things to listen to to get proper context menu handling: Widget.PopupMenu and Widget.ButtonPressEvent. It would be nice if there were just one event to handle that got raised anytime a context menu needed to be displayed.</p>\r\n<p>The following class does just that. You can \"attach\" it to any Widget and it will listen for the Widget.PopupMenu event to work with the default context menu handling and the Widget.ButtonPressEvent to also work with right-clicks. When either of these occur, it will first propagate the event through to the underlying Widget (in case there are other things that are supposed to be triggered by whatever event caused the context menu) and then raise a ContextMenuHelper.ContextMenu event that you can handle and use to display the context menu regardless of what triggered it. This method should ensure proper event handling and ordering while reducing duplication of code by enabling a single event for context menu handling.</p>\r\n\r\n<pre><code class=\"language-csharp\">using System;\r\nusing Gdk;\r\nusing GLib;\r\nusing Gtk;\r\n\r\nnamespace Somedave\r\n{\r\n public class ContextMenuEventArgs : EventArgs\r\n {\r\n  private Widget widget;\r\n  public Widget Widget { get { return widget; } }\r\n\r\n  private bool rightClick;\r\n  public bool RightClick { get { return rightClick; } }\r\n\r\n  public ContextMenuEventArgs(Widget widget, bool rightClick)\r\n  {\r\n   this.widget = widget;\r\n   this.rightClick = rightClick;\r\n  }\r\n }\r\n\r\n public class ContextMenuHelper\r\n {\r\n  public event EventHandler&lt;ContextMenuEventArgs&gt; ContextMenu;\r\n\r\n  public ContextMenuHelper()\r\n  {}\r\n\r\n  public ContextMenuHelper(Widget widget)\r\n  {\r\n   AttachToWidget(widget);\r\n  }\r\n\r\n  public ContextMenuHelper(Widget widget, EventHandler handler)\r\n  {\r\n   AttachToWidget(widget);\r\n   ContextMenu += handler;\r\n  }\r\n\r\n  public void AttachToWidget(Widget widget)\r\n  {\r\n   widget.PopupMenu += Widget_PopupMenu;\r\n   widget.ButtonPressEvent += Widget_ButtonPressEvent;\r\n  }\r\n\r\n  public void DetachFromWidget(Widget widget)\r\n  {\r\n   widget.PopupMenu -= Widget_PopupMenu;\r\n   widget.ButtonPressEvent -= Widget_ButtonPressEvent;\r\n  }\r\n\r\n  [GLib.ConnectBefore]\r\n  private void Widget_PopupMenu(object o, PopupMenuArgs args)\r\n  {\r\n   RaiseContextMenuEvent(args, (Widget)o, false);\r\n  }\r\n\r\n  [GLib.ConnectBefore]\r\n  private void Widget_ButtonPressEvent(object o, ButtonPressEventArgs args)\r\n  {\r\n   if (args.Event.Button == 3 &amp;&amp; args.Event.Type == EventType.ButtonPress)\r\n   {\r\n    RaiseContextMenuEvent(args, (Widget)o, true);\r\n   }\r\n  }\r\n\r\n  private bool propagating = false;   //Prevent reentry\r\n\r\n  private void RaiseContextMenuEvent(SignalArgs signalArgs, Widget widget, bool rightClick)\r\n  {\r\n   if (!propagating)\r\n   {\r\n    //Propagate the event\r\n    Event evnt = Gtk.Global.CurrentEvent;\r\n    propagating = true;\r\n    Gtk.Global.PropagateEvent(widget, evnt);\r\n    propagating = false;\r\n    signalArgs.RetVal = true;     //The widget already processed the event in the propagation\r\n\r\n    //Raise the context menu event\r\n    ContextMenuEventArgs args = new ContextMenuEventArgs(widget, rightClick);\r\n    if (ContextMenu != null)\r\n    {\r\n     ContextMenu.Invoke(this, args);\r\n    }\r\n   }\r\n  }\r\n }\r\n}\r\n</code></pre>"},{"Title":"Object Persistence In Nxdb","Lead":null,"Published":"2012-03-26T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Nxdb","XML","database","persistence","object persistence"],"ViewTypeName":"object_persistence_in_nxdb","Rendered":"\r\n\r\n<p>The most recent version of Nxdb includes a complete object persistence framework and this post explains some of the motivation behind it and provides some insight into how it was implemented.</p>\r\n\r\n<h1>What Is A Persistence Framework?</h1>\r\n\r\n<p><a href=\"http://en.wikipedia.org/wiki/Persistence_framework\">Wikipedia</a> sums it up nicely by saying \"a persistence framework is middleware that assists and automates the storage of program data into databases.\" More to the point, a persistence framework allows the state of object instances to be stored externally (usually, but not necessarily, in a database) and recalled at a later time (such as a future program execution). The \"state\" of an object could be everything that is necessary to fully represent the object (such as all of it's fields), or it could be some important subset of object data.</p>\r\n\r\n<p>Persistence frameworks are related to, but not the same, as object-relational mapper (ORM) tools. A persistence framework usually manages the conversion of an object to some format the external storage medium can understand, the storage of that data into the external medium, the fetching of data from the external medium, and the instantiation and population of instances based on that data. The problem with persistence frameworks when they use a relational database (or other highly structured storage) is that the database needs to know something about the objects being stored so that tables, columns, etc. can be created to support them. ORM tools assist with this process by mapping the data to be stored (I.e., the object) to the storage medium (I.e., the database). They often automate the process of creating appropriate tables and columns, managing foreign keys, etc. An ORM is only needed when the storage medium cannot natively support the type or structure of data needing to be stored.</p>\r\n\r\n<h1>Why Create A New Persistence Framework?</h1>\r\n\r\n<p>In general, I wouldn't really recommend rolling your own persistence framework. There are so many good ones out there (including <a href=\"http://nhforge.org\">NHibernate</a>, <a href=\"http://subsonicproject.com/\">SubSonic</a>, and <a href=\"http://www.mybatis.org/\">mybatis</a>) and it is doubtful you'll be able to improve on them enough to make the exercise worthwhile. So why ignore this advice and build a new one for Nxdb? The answer is that almost all of the existing persistence framework are based on SQL, talk to SQL databases, and either use or have built-in ORM capabilities. XML is a completely different storage medium, one that is able to better represent the hierarchical nature of object-oriented classes. While a couple of .NET XML persistence frameworks do exist (such as <a href=\"http://proetus.codeplex.com/\">Proetus</a>) and several articles have been written at <a href=\"http://www.codeproject.com/search.aspx?q=.net+xml+persistence&amp;sbo=kw\">CodeProject</a> and elsewhere on how to write XML persistence capabilities, they tend to be somewhat conceptual and abstract the storage layer by producing XML that becomes the developer's responsibility to store and retrieve. We saw an opportunity to unlock the potential of a native XML persistence layer by having it be tied directly to an XML database. This allows automation of the storage and retrieval of objects and opens up the door for interesting use cases such as querying the object graph using XQuery.</p>\r\n\r\n<h1>Requirements</h1>\r\n\r\n<p>When we started thinking about an XML persistence layer for Nxdb we considered what the most important requirements should be and narrowed them down to a few key ones:</p>\r\n\r\n\r\n<ul class=\"p\">\r\n <li>The framework should be able to serialize objects in a variety of ways to support many different environments and uses.</li>\r\n <li>The framework should automate the process of storing and fetching objects as much as possible.</li>\r\n <li>The framework should require as small a change as possible to existing objects to make them compatible.</li>\r\n <li>The framework should be extensible, allowing developers to modify or enhance any aspect of the design.</li>\r\n</ul>\r\n<h1>Overall Design</h1>\r\n\r\n<p>The main entry point for the persistence framework is the Manager class. All objects are initially persisted or retrieved through one of it's methods. Objects can be <em>attached</em> to the manager, which means that they are stored in a cache and the manager will return a reference to the same instance of the object if the same XML content is used. Additionally, attached objects can be automatically updated when the database changes, making the objects more of a programmatic representation of the database rather than the database simply serving as a backing store. Each object is persisted to and from the database using a Persister. The persister is primarily responsible for determining what parts of an object should be stored in the database, how those parts should be represented (for example as XML elements or attributes), and performing the actual serialization and deserialization of an object. There are several persisters including one that supports the native .NET XmlSerializer, one that provides a great deal of control through the use of attributes on class members, and one that allows completely custom behavior through the implementation of an interface. Should additional techniques be required, a new persister is easy to create and implement. Overall, the architecture and process by which objects are stored to the database and fetched from the database is presented below.</p>\r\n\r\n\r\n<img class=\"img-responsive\" src=\"/Content/posts/persistenceprocess1.png\"></img>\r\n"},{"Title":"Nested Grabs In GtkSharp","Lead":null,"Published":"2010-04-15T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Mono","GtkSharp"],"ViewTypeName":"nested_grabs_in_gtksharp","Rendered":"\r\n\r\n<p>I ran across this while working on some complex GtkSharp grabbing behavior to mimic window focusing for a docking framework. Turns out there is a weird inconsistency in the way Gtk+ manages the grab stack. While the list of grabbed Widgets is indeed a stack, a flag on each Widget (<code>Widget.HasGrab</code>) is used to check if a Widget has the grab or not. The problem is that <code>Grab.Add</code> (which calls the Gtk+ method <code><a href=\"http://library.gnome.org/devel/gtk/stable/gtk-General.html#gtk-grab-add\">gtk_grab_add</a></code>) never clears the flag for the currently grabbed Widget if you're nesting grabs. That means that <em>every Widget in the grab stack</em> will have <code>Widget.HasGrab</code> set to true. If you try to add a Widget to the grab stack and it's already in the stack (even if there are multiple other grabbed Widgets after it in the stack), it won't get added. Because the flag is set though, it <em>will</em> get removed at the first place it was in the stack on a call to <code>Grab.Remove</code> (<code><a href=\"http://library.gnome.org/devel/gtk/stable/gtk-General.html#gtk-grab-remove\">gtk_grab_remove</a></code>).</p>\r\n\r\n<p>While it may not be a bug, this is certainly odd behavior. The solution (at least for me) was to write two small utility methods. <code>SafeAdd</code> first removes the <code>Widget.HasGrab</code> flag to ensure that the Widget always gets added to the grab stack, regardless of if it's previously in it. <code>SafeAdd</code> should be paired with <code>SafeRemove</code> which checks the newly grabbed Widget after removing one to make sure it still has the <code>Widget.HasGrab</code> flag set. Note that it doesn't clear the <code>Widget.HasGrab</code> flag for grabbed Widget getting replaced by a new grabbed Widget on the grab stack as you might expect. This maintains compatibility with all the other Gtk code that might be expecting Widgets anywhere in the stack to have the flag set.</p>\r\n\r\n<pre><code class=\"language-csharp\">public static void SafeAdd(Widget widget)\r\n{\r\n if (widget == null)\r\n {\r\n  throw new ArgumentNullException(\"widget\");\r\n }\r\n if (widget.Sensitive)\r\n {\r\n  widget.ClearFlag(WidgetFlags.HasGrab);\r\n  Grab.Add(widget);\r\n }\r\n}\r\n\r\npublic static void SafeRemove(Widget widget)\r\n{\r\n if (widget == null)\r\n {\r\n  throw new ArgumentNullException(\"widget\");\r\n }\r\n Grab.Remove(widget);\r\n Widget current = Grab.Current;\r\n if( current != null && !current.HasGrab )\r\n {\r\n  current.SetFlag(WidgetFlags.HasGrab);\r\n }\r\n}</code></pre>\r\n"},{"Title":"Introducing Nxdb","Lead":"A high-performance embedded XML database for .NET.","Published":"2012-02-24T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Nxdb","XML","XQuery","database"],"ViewTypeName":"introducing_nxdb","Rendered":"\r\n\r\n<p>For the second time in as many weeks, I have the pleasure of announcing a new open source project. This time I've released Nxdb, a high-performance embedded XML database for .NET with full XQuery support. It is essentially a .NET binding for the excellent <a href=\"http://basex.org/\">BaseX</a> Java XML database. However, Nxdb goes well beyond a simple wrapper by providing a native .NET API suitable for embedding (the primary focus of BaseX is on client/server uses), providing additional functionality to interface directly with .NET classes and objects, and rethinking several aspects of the BaseX design for the embedded use case. The underlying BaseX code is cross-compiled to IL using <a href=\"http://www.ikvm.net/\">IKVM</a> making Nxdb 100% native .NET, usable on all .NET platforms including <a href=\"http://www.mono-project.com\">Mono</a>.</p>\r\n\r\n<p>This project has a long history. Around the fall of 2008, my company, DRAC was tasked with developing an entirely new cross-platform graphical user interface for one of the US Air Force's most complex models. The model itself used over a hundred different input files, each with slightly different grammar and syntax. What we needed was a way to store, query, and manipulate all of this data in a consistent way. XML seemed like an ideal choice given it's ability to represent data hierarchically and powerful XQuery query language. Having already made the decision to use Mono as our platform, we scoured both the open source community and commercial vendors to find a database backend that was a good fit. We were surprised to discover that there weren't very many suitable embedded XML databases for .NET and the ones we did find were either too slow for processing and querying the volume of data we needed to work with or had cumbersome and limited APIs that didn't allow the control we needed.</p>\r\n\r\n<p>Thankfully, we stumbled on BaseX when it was a fairly early project. We were immediately impressed with the completeness of it's query engine and the fast performance. Unfortunately it was written in Java and we were using .NET and had already sunk considerable resources into the GUI shell. Having used IKVM to cross-compile Java code before, we decided to give it a shot for BaseX and were pleased to discover it converted and ran quite well. Over the intervening years we've separated our BaseX binding from the original project, applied it to many other projects, and watched as BaseX has flourished. Nxdb is now used in production code every day and we're excited to share it with the rest of the open source community.</p>\r\n\r\n<h1>Usage</h1>\r\n\r\n<p>Nxdb is designed to be easy to use. It provides two primary means of working with the database. The first is by directly working with the database through classes that represent XML nodes. The other main interface is through the evaluation of XQuery expressions.</p>\r\n\r\n<p>The Database class serves as the starting point for working with an Nxdb database. It encapsulates all of the operations on a database instance and provides methods for getting node objects and evaluating queries. Before use, Nxdb must be initialized as follows using the static Database.Initialize() method (path is where all of the database files will be stored):</p>\r\n\r\n<pre><code class=\"language-csharp\">Database.Initialize(path);</code></pre>\r\n\r\n<p>Once that's done, a new or existing database can be obtained via the static Database.Get() method:</p>\r\n\r\n<pre><code class=\"language-csharp\">Database.Get(databaseName);</code></pre>\r\n\r\n<p>Once a Database instance has been obtained, XML content can be added, documents fetched, and queries executed. A very simple example usage might look like this:</p>\r\n\r\n<pre><code class=\"language-csharp\">using Nxdb;\r\nDatabase.Initialize(\"C:\\Temp\\NxdbData\");\r\nusing(Database db = Database.Get(\"Example\"))\r\n{\r\n  db.Add(\"DocA\", \"<A><B>b</B><C>c</C></A>\");\r\n  Document doc = db.GetDocument(\"DocA\");\r\n  Console.Write(doc.OuterXml);\r\n}</code></pre>\r\n\r\n<h1>Obtaining</h1>\r\n\r\n<p>Nxdb is open source and released under the Apache 2.0 license. It can be obtained here: <a href=\"https://github.com/somedave/Nxdb\">https://github.com/somedave/Nxdb</a></p>\r\n"},{"Title":"Introducing NiceThreads","Lead":"A threading utility library designed to make different threading primitives easier to use.","Published":"2012-02-17T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["NiceThreads","Threading","Monitor","ReaderWriterLockSlim","locking","ILocker"],"ViewTypeName":"introducing_nicethreads","Rendered":"\r\n\r\n<p>NiceThreads is threading utility library designed to make different threading primitives easier to use with a more consistent API. It started out of frustration with the different options (and more specifically, the different APIs) for enabling thread safety and locks in the .NET framework and how much code was required to use some of them. NiceThreads provides a consistent interface for standard <code><a href=\"http://msdn.microsoft.com/en-us/library/system.threading.monitor.aspx\">Monitor</a></code> locks and the <code><a href=\"http://msdn.microsoft.com/en-us/library/system.threading.readerwriterlockslim.aspx\">ReaderWriterLockSlim</a></code> class (and possibly others in the future). It also provides support for activating and deactivating these locking primitives through the <a href=\"http://msdn.microsoft.com/en-us/library/system.idisposable.aspx\">disposable pattern</a>. Finally, it provides wrappers that can easily provide thread-safety to unsafe objects.</p>\r\n<h1>Common API</h1>\r\n<p>Both <code>Monitor</code> (and the \"lock\" statement which is syntactic sugar for <code>Monitor</code>) and <code>ReaderWriterLockSlim</code> attempt to solve the same problem: preventing conflicting concurrent access to objects that might need to be read or written to by multiple threads. They both do this by limiting access to the object to one thread at a time (or in the case of read locks provided by <code>ReaderWriterLockSlim</code>, only to threads that signal they want read-only access) while making other threads wait their turn. However, even though both classes provide similar functionality they are intended for different uses and have <a href=\"http://blogs.msdn.com/b/pedram/archive/2007/10/07/a-performance-comparison-of-readerwriterlockslim-with-readerwriterlock.aspx\">different tradeoffs</a>. Further, they use similar but different APIs making switching between them difficult.</p>\r\n<p>To solve this problem, NiceThreads provides a consistent ILocker interface that has implementations wrapping both classes and provides a consistent API. The rest of NiceThreads is designed to interact with <code>ILocker</code> allowing interchangeable use of the different types of locking primitives. In addition, the <code>ILocker</code> interface can be used directly to provide a consistent wrapper around either locking class for your own code.</p>\r\n<p>For example:</p>\r\n<pre><code class=\"language-csharp\">ILocker locker = new ReaderWriterLockSlimLocker();\r\nlocker.EnterReadLock();\r\n// Do work...\r\nlocker.ExitReadLock();\r\nlocker = new MonitorLocker();\r\nlocker.EnterReadLock();\r\n// Do work...\r\nlocker.ExitReadLock();</code></pre>\r\n<h1>Disposable Pattern</h1>\r\n<p>Both locking primitives require explicitly activating the lock and subsequently manually removing the lock when finished. This can lead to problems if the developer forgets to release the lock or ends up exiting the normal program flow (for example, because an exception was thrown). The <code>lock</code> keyword in C# attempts to make this design easier to use for the <code>Monitor</code> class by abstracting <code>Monitor</code> instantiation and surrounding it's use in a control block, however, no such keyword exists for other locking classes such as <code>ReaderWriterLockSlim</code>. In addition, using the <code>lock</code> keyword means some control is lost over the lifecycle and usage of the underlying <code>Monitor</code> class.</p>\r\n<p>NiceThreads attempts to solve this problem by providing a set of classes that implement <code>IDisposable</code> and wraps an underlying <code>ILocker</code> (which in turn provides consistent access to alternate framework locking classes). They activate the requested lock type on instantiation and free it on disposal. This allows the developer to use the built-in support for the disposable pattern in .NET to automatically free a lock when finished with it by using the <code>using</code> statement.</p>\r\n<p>For example:</p>\r\n<pre><code class=\"language-csharp\">ILocker locker = new ReaderWriterLockSlimLocker();\r\nusing(new ReadLock(locker))\r\n{\r\n  // Do work...\r\n}</code></pre>\r\n<h1>Thread-Safe Wrappers</h1>\r\n<p>Even with the added convenience of a consistent API and disposable pattern support, implementing thread-safety for non-thread-safe objects can still require a fair amount of code. For every object that needs to be protected, a new locking object potentially needs to be created and maintained. NiceThreads helps implement thread safety for objects by providing wrapper classes that encapsulate generic locking logic and provide thread-safe access to their underlying object. <code>SyncObject&lt;T&gt;</code> wraps an arbitrary type and <code>ReadOnlySyncObject&lt;T&gt;</code> wraps an arbitrary type while providing \"readonly\" semantics (I.e., once the <code>ReadOnlySyncObject&lt;T&gt;</code> has been constructed, it's underlying object cannot be changed). These classes provide a variety of methods to expose their wrapped object in thread-safe ways including thread-safe getting and setting, disposable pattern access, and action/function providers (I.e., lambdas or anonymous methods).</p>\r\n<p>For example:</p>\r\n<pre><code class=\"language-csharp\">SyncObject&lt;int&gt; num = new SyncObject&lt;int&gt;(10);\r\nnum.Sync = 20; // Access as a property with a thread-safe setter\r\nint value = num.Sync; // Access as a property with a thread-safe getter\r\nusing(num.WriteLock())\r\n{\r\n // We can now access using unsafe code\r\n num.UnsyncField++; // Provides direct field access\r\n value = num.Unsync; // Access as a property with an unsafe getter\r\n}\r\nnum.DoWrite(n => n + 10); // Thread-safe write with an Action\r\nvalue = num.DoRead(n => n + 100); // Thread-safe read with a Func\r\n</code></pre>\r\n<h1>Obtaining</h1>\r\n<p>NiceThreads is open source and released under the Apache 2.0 license. It can be obtained here: <a href=\"https://github.com/somedave/NiceThreads\">https://github.com/somedave/NiceThreads</a></p>\r\n"},{"Title":"Getting an HtmlHelper for an Alternate Model Type","Lead":null,"Published":"2012-10-17T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["ASPNET","ASPNET MVC","MVC","HTML helpers","HtmlHelper"],"ViewTypeName":"getting_an_htmlhelper_for_an_alternate_model_type","Rendered":"\r\n\r\n\r\n<p>First off, I'm back and have a lot of little tips to blog about over the next several weeks. Since my last post I have changed jobs and am no longer working with Mono, Gtk#, or XML on a daily basis. However, I am still developing for the .NET platform and have been focusing recently on ASP.NET MVC and Entity Framework. Now, on to the topic at hand...</p>\r\n\r\n<p>By default, the Razor view engine for ASP.NET MVC rigs up a nice little object of type <code>HtmlHelper&lt;TModel&gt;</code> for us that can be used as the first argument in extension methods. This convention gets used a lot for all sorts of HTML helpers such as automatic generation of form controls, validation messages, etc. In most cases, you want to operate on the model type that was passed to the view and the default <code>HtmlHelper</code> instance works fine. However, there are some cases when you might need access to a <code>HtmlHelper</code> that has a different generic type than that of the view's model. Some of these include displaying the display name metadata (such as that from a <code>DisplayAttribute</code> on your model) in column headers for a table (in which case the view's model is probably an <code>IEnumerable</code> and not the actual type that you want metadata for) and displaying form controls for models included through encapsulation inside the view's model. Regardless of the reason, it's not easy to create an <code>HtmlHelper</code> for a type other than the specified model - you can't just construct one from scratch because the HtmlHelper class expects a lot of information about the context and data in the view.</p>\r\n\r\n<p>Thankfully there are ways to make this work. I would like to give a lot of credit to Tahir Hassan for his answer to a <a href=\"http://stackoverflow.com/questions/1321254/asp-net-mvc-typesafe-html-textboxfor-with-different-outputmodel\">related question on Stack Overflow</a>. In his answer he describes an HTML helper extension method that can get a new <code>HtmlHelper</code> of a requested type. The code in this article is based very heavily on his code with very few changes. Below is the code for a series of extension methods and direct methods (more on these in a later post) for getting an alternate <code>HtmlHelper</code>.</p>\r\n\r\n<pre><code class=\"language-csharp\">public static class HtmlHelpers\r\n{\r\n    public static HtmlHelper&lt;TModel&gt; For&lt;TModel&gt;(this HtmlHelper helper) where TModel : class, new()\r\n    {\r\n        return For&lt;TModel&gt;(helper.ViewContext, helper.ViewDataContainer.ViewData, helper.RouteCollection);\r\n    }\r\n\r\n    public static HtmlHelper&lt;TModel&gt; For&lt;TModel&gt;(this HtmlHelper helper, TModel model)\r\n    {\r\n        return For&lt;TModel&gt;(helper.ViewContext, helper.ViewDataContainer.ViewData, helper.RouteCollection, model);\r\n    }\r\n\r\n    public static HtmlHelper&lt;TModel&gt; For&lt;TModel&gt;(ViewContext viewContext, ViewDataDictionary viewData, RouteCollection routeCollection) where TModel : class, new()\r\n    {\r\n        TModel model = new TModel();\r\n        return For&lt;TModel&gt;(viewContext, viewData, routeCollection, model);\r\n    }\r\n\r\n    public static HtmlHelper&lt;TModel&gt; For&lt;TModel&gt;(ViewContext viewContext, ViewDataDictionary viewData, RouteCollection routeCollection, TModel model)\r\n    {\r\n        var newViewData = new ViewDataDictionary(viewData) { Model = model };\r\n        ViewContext newViewContext = new ViewContext(\r\n            viewContext.Controller.ControllerContext,\r\n            viewContext.View,\r\n            newViewData,\r\n            viewContext.TempData,\r\n            viewContext.Writer);\r\n        var viewDataContainer = new ViewDataContainer(newViewContext.ViewData);\r\n        return new HtmlHelper&lt;TModel&gt;(newViewContext, viewDataContainer, routeCollection);\r\n    }\r\n\r\n    private class ViewDataContainer : System.Web.Mvc.IViewDataContainer\r\n    {\r\n        public System.Web.Mvc.ViewDataDictionary ViewData { get; set; }\r\n\r\n        public ViewDataContainer(System.Web.Mvc.ViewDataDictionary viewData)\r\n        {\r\n            ViewData = viewData;\r\n        }\r\n    }\r\n}</code></pre>\r\n\r\n<p>Once these extension methods are available you can write things like the following in your views:</p>\r\n\r\n<pre><code class=\"language-csharp\">&lt;th&gt;@(Html.For&lt;TableItemModel&gt;().DisplayNameFor(m => m.ThisColumnProperty))&lt;/th&gt;</code></pre>\r\n\r\n<pre><code class=\"language-csharp\">&lt;td&gt;@(Html.For(rowItem).TextBoxFor(m => m.ThisColumnProperty))&lt;/td&gt;</code></pre>\r\n\r\n<p>By itself this is already a powerful capability and opens up your views to additional model types easily. In my next post I'll detail how to use the non-extension versions with the MVC wrappers for KendoUI to automatically set the title of a bound grid column.</p>\r\n"},{"Title":"Exporting a GtkSharp TreeView to CSV","Lead":"All packaged up in nice little utility methods.","Published":"2010-04-09T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["Mono","GtkSharp","CellRenderer","CSV","TreeModel","TreeView","TreeViewColumn"],"ViewTypeName":"exporting_a_gtksharp_treeview_to_csv","Rendered":"\r\n\r\n<p>I recently had to create some functionality to export a TreeView widget to a CSV file for further analysis. Since I tend to think about generic behavior, I decided to code up a method that would take any arbitrary TreeView and perform the export operation. Luckily, the TreeView widget and the attached TreeModel both contain a lot of functionality for accessing the data and it's presentation. I decided that I wanted the exported CSV file to represent the perspective of the model as currently represented in the TreeView including column visibility and sort order. This led to the trickiest part of the process. Because a CellRenderer can be customized using cell data functions (such as those added by a call to TreeViewColumn.SetCellDataFunc), I had to pull the content to export from the CellRenderer as opposed to pulling directly from the TreeModel. Turns out there's a method to take the TreeIter from a TreeModel and apply it to all the CellRenderers in a given TreeViewColumn. Since I really only care about textual content, I decided to only export those columns that contain CellRendererText renderers.</p>\r\n<p>After working out the algorithm to fetch what needed to be exported I thought I was ready to roll. Turns out that the CSV pseudo-standard is pretty complex though (the RFC is <a href=\"http://www.rfc-editor.org/rfc/rfc4180.txt\">here</a>), and I quickly got bogged down in writing all kinds of special cases for escaping, quoting, etc. Thankfully, someone else had already been down this road and I was able to find the excellent <a href=\"http://kbcsv.codeplex.com/\">KBCsv</a> library which will write and read formatted CSV files. My only complaint was that it used another utility library purely for convenience in exception generation and null checking (I already use a ton of libraries in our application and I'd prefer not to add any unnecessarily). I replaced the calls to the utility library with the language equivalents, but that's totally a personal preference.</p>\r\n<p>Without further adieu, I present the <code>TreeViewHelper.ExportToCsv</code> and <code>TreeViewHelper.ExportToCsvFile</code> methods...</p>\r\n<pre><code class=\"language-csharp\">using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing Gtk;\r\nusing Kent.Boogaart.KBCsv;\r\n\r\nnamespace Somedave\r\n{\r\n public static class TreeViewHelper\r\n {\r\n  public static bool ExportToCsv(TreeView treeView, Window parent)\r\n  {\r\n   FileChooserDialog fcd = new FileChooserDialog(\"Export File\", parent, FileChooserAction.Save,\r\n   \"Cancel\", ResponseType.Cancel, \"Export\", ResponseType.Accept);\r\n   fcd.DoOverwriteConfirmation = true;\r\n   FileFilter filter = new FileFilter { Name = \"CSV File\" };\r\n   filter.AddPattern(\"*.csv\");\r\n   fcd.AddFilter(filter);\r\n   if (fcd.Run() == (int)ResponseType.Accept)\r\n   {\r\n    string path = fcd.Filename;\r\n    fcd.Destroy();\r\n    return ExportToCsvFile(treeView, path);\r\n   }\r\n   fcd.Destroy();\r\n   return false;\r\n  }\r\n\r\n  public static bool ExportToCsvFile(TreeView treeView, string path)\r\n  {\r\n   //Get the iterator\r\n   TreeIter iter;\r\n   if (treeView.Model.GetIterFirst(out iter))\r\n   {\r\n    //Create the stream\r\n    using (StreamWriter streamWriter = new StreamWriter(path, false))\r\n    {\r\n     //Create the CSV writer\r\n     using (CsvWriter csvWriter = new CsvWriter(streamWriter))\r\n     {\r\n      List&lt;string&gt; headers = new List&lt;string&gt;();\r\n      List&lt;string&gt; values = new List&lt;string&gt;();\r\n\r\n      //Traverse the tree\r\n      do\r\n      {\r\n       values.Clear();\r\n       foreach (TreeViewColumn column in treeView.Columns)\r\n       {\r\n        //Only output visible columns\r\n        if (column.Visible)\r\n        {\r\n         //Loop through CellRenderers to make sure we have a CellRendererText\r\n         string value = null;\r\n         column.CellSetCellData(treeView.Model, iter, false, false);\r\n         foreach (CellRenderer renderer in column.CellRenderers)\r\n         {\r\n          CellRendererText text = renderer as CellRendererText;\r\n          if (text != null)\r\n          {\r\n           //Setting value indicates this column had a CellRendererText and should be included\r\n           if (value == null)\r\n           {\r\n            value = String.Empty;\r\n           }\r\n\r\n           //Add the header if the first time through\r\n           if (headers != null)\r\n           {\r\n            headers.Add(column.Title);\r\n           }\r\n\r\n           //Append to the value\r\n           if (text.Text != null)\r\n           {\r\n            value += text.Text;\r\n           }\r\n          }\r\n         }\r\n         if (value != null)\r\n         {\r\n          values.Add(value);\r\n         }\r\n        }\r\n       }\r\n\r\n       //Output the header\r\n       if (headers != null)\r\n       {\r\n        csvWriter.WriteHeaderRecord(headers.ToArray());\r\n        headers = null;\r\n       }\r\n\r\n       //Output the values\r\n       csvWriter.WriteDataRecord(values.ToArray());\r\n      } while (treeView.Model.IterNext(ref iter));\r\n     }\r\n    }\r\n    return true;\r\n   }\r\n   return false;\r\n  }\r\n }\r\n}\r\n</code></pre>\r\n\r\n"},{"Title":"Automatically Generating Column Titles For A KendoUI MVC Grid","Lead":null,"Published":"2013-04-11T00:00:00","Edited":"0001-01-01T00:00:00","Tags":["ASPNET","ASPNET MVC","KendoUI","KendoUI MVC","grid","data annotations"],"ViewTypeName":"automatically_generating_column_titles_for_a_kendoui_mvc_grid","Rendered":"\r\n\r\n<p>I love KendoUI, especially because of the available MVC wrappers. It is a very well engineered product with lots of opportunity for extension, and in this post I'll briefly discuss one that should relieve a small pain point: generating grid column titles from a <code><a href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.displayattribute.aspx\">DisplayAttribute</a></code> <a href=\"http://msdn.microsoft.com/en-us/library/dd901590(v=vs.95).aspx\">data annotation</a>. As you probably already know, you can change the way your UI layer presents properties of your model by applying the <code>DisplayAttribute</code> data annotation. This causes most of the UI code to use the <code>Name</code> property of the attribute when displaying that property. It looks like this:</p>\r\n\r\n<pre><code class=\"language-csharp\">[Display(Name = \"The Product!\")]\r\npublic string ProductName { get; set; }</code></pre>\r\n\r\n<p>Until recently, KendoUI would not recognize the <code>DisplayAttribute</code> applied to a bound column. However, before I go much further, it's worth noting that this is no longer the case. I waited too long to post this article and KendoUI already gets the column title from a <code>DisplayAttribute</code> data annotation if there is one. I am posting this anyway because the technique could be generalized to other ways of customizing the grid by using an extension method.</p>\r\n\r\n<p>Now, let's say we have a KendoUI grid declared in Razor using the MVC wrappers (this is from their demo page):</p>\r\n\r\n<pre><code class=\"language-csharp\">@model IEnumerable&lt;Kendo.Mvc.Examples.Models.ProductViewModel&gt;\r\n\r\n@(Html.Kendo().Grid(Model)    \r\n    .Name(\"Grid\")\r\n    .Columns(columns =&gt;\r\n    {\r\n        columns.Bound(p =&gt; p.ProductID);\r\n        columns.Bound(p =&gt; p.ProductName);\r\n    })\r\n    .DataSource(dataSource =&gt; dataSource\r\n        .Ajax().Read(read =&gt; read.Action(\"Products_Read\", \"Grid\"))\r\n    )\r\n)</code></pre>\r\n\r\n<p>When displaying the column titles, KendoUI will use the name of the property to generate the name of the column. In the example above, you will get two columns named \"Product ID\" and \"Product Name\" (Kendo is smart enough to add the spaces in between the capital letters). But what if we wanted our second column to be named \"The Product!\" as in the example application of <code>DisplayAttribute</code> above? We could add the title explicitly using the <code>Title()</code> extension method:</p>\r\n\r\n<pre><code class=\"language-csharp\">...\r\ncolumns.Bound(p =&gt; p.ProductName).Title(\"The Product!\");\r\n...</code></pre>\r\n\r\n<p>But this violates the <a href=\"http://en.wikipedia.org/wiki/Don't_repeat_yourself\">DRY principle</a>. If you want to change the title in the future, you'll need to remember to change it in both places. What would be better is if we could write something like:</p>\r\n\r\n<pre><code class=\"language-csharp\">...\r\ncolumns.Bound(p =&gt; p.ProductName).DisplayNameTitle();\r\n...</code></pre>\r\n\r\n<p>This would indicate to the grid that the title should be set by getting a <code>DisplayAttribute</code> <code>Name</code> property (if there is one) and using the normal name generation otherwise. The code for such an extension method is below:</p>\r\n\r\n<pre><code class=\"language-csharp\">public static GridBoundColumnBuilder&lt;TModel&gt; DisplayNameTitle&lt;TModel&gt;(\r\n    this GridBoundColumnBuilder&lt;TModel&gt; builder) where TModel : class, new()\r\n{\r\n    // Create an adapter to access the typed grid column\r\n    // (which contains the Expression)\r\n    Type adapterType = typeof(GridBoundColumnAdapter&lt;,&gt;)\r\n        .MakeGenericType(typeof(TModel), builder.Column.MemberType);\r\n    IGridBoundColumnAdapter adapter =\r\n        (IGridBoundColumnAdapter)Activator.CreateInstance(adapterType);\r\n\r\n    // Use the adapter to get the title and set it\r\n    return builder.Title(adapter.GetDisplayName(builder.Column));\r\n}\r\n\r\nprivate interface IGridBoundColumnAdapter\r\n{\r\n    string GetDisplayName(IGridBoundColumn column);\r\n}\r\n\r\nprivate class GridBoundColumnAdapter&lt;TModel, TValue&gt;\r\n    : IGridBoundColumnAdapter where TModel : class, new()\r\n{\r\n    public string GetDisplayName(IGridBoundColumn column)\r\n    {\r\n        // Get the typed bound column\r\n        GridBoundColumn&lt;TModel, TValue&gt; boundColumn =\r\n            column as GridBoundColumn&lt;TModel, TValue&gt;;\r\n        if (boundColumn == null) return String.Empty;\r\n\r\n        // Create the appropriate HtmlHelper and use it to get the display name\r\n        HtmlHelper&lt;TModel&gt; helper = HtmlHelpers.For&lt;TModel&gt;(\r\n            boundColumn.Grid.ViewContext,\r\n            boundColumn.Grid.ViewData,\r\n            new RouteCollection());\r\n        return helper.DisplayNameFor(boundColumn.Expression).ToString();\r\n    }\r\n}</code></pre>\r\n\r\n<p>So let's look at this code a little more closely. The first <code>DisplayNameTitle&lt;TModel&gt;()</code> method is the actual extension. It takes a <code>GridBoundColumnBuilder&lt;TModel&gt;</code> because that's what the <code>Bound()</code> method returns as part of the KendoUI MVC fluent interface for column specifications. The <code>DisplayNameTitle</code> extension method creates an instance of an adapter class that can be used to manipulate the grid column. Because the KendoUI MVC classes are strongly typed, we need to use reflection to create an adapter with the proper generic type parameters. The key to this working is that the adapter class implements the non-generic <code>IGridBoundColumnAdapter</code> interface, which means that by casting the reflection-generated generic adapter class to the interface we can call non-generic methods that have access to the generic type parameters we used during the reflected construction in the actual implementation of the method.</p>\r\n\r\n<p>The real work gets done inside the <code>GetDisplayName()</code> implementation. This method <a href=\"/posts/getting-an-htmlhelper-for-an-alternate-model-type\">creates an&#160;appropriately&#160;typed HtmlHelper</a> and then uses it to call the <code>HtmlHelper.DisplayNameFor()</code> extension method. This ensures that our own <code>DisplayNameTitle()</code> extension will always return the exact same title that would be returned if we used the normal MVC <code>HtmlHelper</code> methods to display the property.</p>\r\n\r\n<p>This technique could be used to add other extensions to the KendoUI column building fluent interface as well. For example, you could automatically make a column sortable or not based on the data type.</p>\r\n"}]