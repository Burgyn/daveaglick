@{
    Title = "NuGet Stats - " + Model.Id + " Dependencies";
}

@using System.Web.Mvc
@using Somedave.Models.NuGetStats
@model Somedave.Models.NuGetStats.PackageViewModel

<script src="@Links.Scripts.cytoscape_min_js"></script>

@using(Bootstrap.Div().AddCss("banner").Begin())
{
    @Bootstrap.Heading3(Html.ActionLink("NuGet Stats", MVC.NuGetStats.Index()).ToString())
    @Bootstrap.Div().AddCss("title").SetText(Model.Id)
    <hr />
}

@using (var grid = Bootstrap.GridRow().Begin())
{
    using (grid.GridColumn().SetLg(4).SetMd(6).Begin())
    {
        @Bootstrap.Heading4(Model.Versions.Sum(x => x.DownloadCount).ToString("N0") + " Total Downloads")
        <div><strong><a href="http://www.nuget.org/packages/@(Model.Id)">View Package on NuGet.org</a></strong></div>
    
        <hr />

        @Bootstrap.Heading3("Authors")
        if (Model.Authors.Count() == 0)
        {
            <p>This package has no authors.</p>
        }
        else
        {
            using (var table = Bootstrap.Table().SetStyle(TableStyle.Striped).Begin())
            {
                @table.TableHeaderRow("Name")
                foreach (string author in Model.Authors)
                {
                    @table.TableDataRow(author)
                }
            }
        }

        @Bootstrap.Heading3("Versions")
        if (Model.Authors.Count() == 0)
        {
            <p>This package has no versions (possibly all are unlisted).</p>
        }
        else
        {
            using (var table = Bootstrap.Table().SetStyle(TableStyle.Striped).Begin())
            {
                @table.TableHeaderRow("Version", "Downloads", "Created")
                foreach (PackageViewModel.Version version in Model.Versions)
                {
                    @table.TableDataRow(string.Format("<a href='http://www.nuget.org/packages/{0}/{1}'>{1}</a>", Model.Id, version.Name), version.DownloadCount.ToString("N0"), version.Created.ToShortDateString())
                }
            }
        }

        @Bootstrap.Heading3("Tags")
        if (Model.Tags.Count() == 0)
        {
            <p>This package has no tags.</p>
        }
        else
        {
            using (var table = Bootstrap.Table().SetStyle(TableStyle.Striped).Begin())
            {
                @table.TableHeaderRow("Tag")
                foreach (string tag in Model.Tags)
                {
                    @table.TableDataRow(tag)
                }
            }
        }
    }
    using (grid.GridColumn().SetLg(8).SetMd(6).Begin())
    {
        @Bootstrap.Heading3("Dependency Graph")
        <p>Hover on a node to show it's package ID. Click/tap on a node to highlight it's immediate neighbor nodes. Right-click/two-finger-tap on a node to go to it's package page.</p>
        <div id="dependency-graph" class="graph" style="height: 400px;"></div>
    
        using (var dependencyGrid = Bootstrap.GridRow().Begin())
        {
            using (dependencyGrid.GridColumn().SetLg(6).SetMd(12).Begin())
            {
                @Bootstrap.Heading3("Dependent").SetSmallText(string.Format("{0} direct, {1} total", Model.Dependencies.Count(x => x.Value.Dependents.Any(y => y.Value == 1)).ToString("N0"), Model.Dependencies.Count(x => x.Value.HasDependents).ToString("N0")))
                if (!Model.Dependencies.Any(x => x.Value.HasDependents))
                {
                    <p>No packages are dependent on this package.</p>
                }
                else
                {
                    <p>These packages are <em>possibly</em> dependent on this package (depending on selected versions).</p>
                    using (var table = Bootstrap.Table().SetStyle(TableStyle.Striped).Begin())
                    {
                        @table.TableHeaderRow("Package", "Minimum Depth")
                        foreach (KeyValuePair<string, PackageViewModel.DependencyData> kvp in Model.Dependencies.Where(x => x.Value.HasDependents).OrderBy(x => x.Key))
                        {
                            using (table.TableDataRow().Begin())
                            {
                                using (table.TableData().Begin())
                                {
                                    @Html.ActionLink(kvp.Key, MVC.NuGetStats.Package(kvp.Key))<br />
                                    if (kvp.Value.Dependents.Any(x => !string.Equals(x.Key, Model.Id, StringComparison.OrdinalIgnoreCase)))
                                    {
                                        <small>@Html.Raw("via " + string.Join(", ", kvp.Value.Dependents.Select(x => Html.ActionLink(x.Key, MVC.NuGetStats.Package(x.Key)))))</small>
                                    }
                                }
                                using (table.TableData().Begin())
                                {
                                    <text>@kvp.Value.Dependents.Min(x => x.Value)</text>
                                }
                            }
                        }
                    }
                }
            }
            using (dependencyGrid.GridColumn().SetLg(6).SetMd(12).Begin())
            {
                @Bootstrap.Heading3("Dependencies").SetSmallText(string.Format("{0} direct, {1} total", Model.Dependencies.Count(x => x.Value.Dependencies.Any(y => y.Value == 1)).ToString("N0"), Model.Dependencies.Count(x => x.Value.HasDependencies).ToString("N0")))
                if (!Model.Dependencies.Any(x => x.Value.HasDependencies))
                {
                    <p>This package is not dependent on any packages.</p>
                }
                else
                {
                    <p>This package is <em>possibly</em> dependent on the following packages (depending on selected versions).</p>
                    using (var table = Bootstrap.Table().SetStyle(TableStyle.Striped).Begin())
                    {
                        @table.TableHeaderRow("Package", "Minimum Depth")
                        foreach (KeyValuePair<string, PackageViewModel.DependencyData> kvp in Model.Dependencies.Where(x => x.Value.HasDependencies).OrderBy(x => x.Key))
                        {
                            using (table.TableDataRow().Begin())
                            {
                                using (table.TableData().Begin())
                                {
                                    @Html.ActionLink(kvp.Key, MVC.NuGetStats.Package(kvp.Key))<br />
                                    if (kvp.Value.Dependencies.Any(x => !string.Equals(x.Key, Model.Id, StringComparison.OrdinalIgnoreCase)))
                                    {
                                        <small>@Html.Raw("via " + string.Join(", ", kvp.Value.Dependencies.Select(x => Html.ActionLink(x.Key, MVC.NuGetStats.Package(x.Key)))))</small>
                                    }
                                }
                                using (table.TableData().Begin())
                                {
                                    <text>@kvp.Value.Dependencies.Min(x => x.Value)</text>
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

@Html.Action(MVC.NuGetStats.Footer())

<script>
    $('#dependency-graph').cytoscape({
        style: cytoscape.stylesheet()
          .selector('node')
            .css({
                'width': '5',
                'height': '5'
            })
          .selector('edge')
            .css({
                'curve-style': 'haystack',
                'haystack-radius': '0',
                'width': '1'
            })
          .selector(':selected')
            .css({
                'background-color': 'black',
                'line-color': 'black',
                'target-arrow-color': 'black',
                'source-arrow-color': 'black'
            })
          .selector('.faded')
            .css({
                'opacity': 0.25,
                'text-opacity': 0,
            })
          .selector('.ontop')
            .css({
                'z-index': 10000,
            })
          .selector('.mouseover')
            .css({
                'content': 'data(name)',
                'font-size': '8px'
            })
          .selector('.selectednode')
            .css({
                'content': 'data(name)',
                'font-size': '8px'
            }),

        motionBlur: false,
        wheelSensitivity: .1,
        textureOnViewport: true,
        hideEdgesOnViewport: true,
        hideLabelsOnViewport: true,
        selectionType: 'single',
        boxSelectionEnabled: false,
        layout: { name: 'preset' },

        elements: {
            nodes: [
                @(Html.Raw(string.Join(",",
                    Model.Dependencies
                    .Select(x => string.Format("{{ data: {{ id: '{0}', name: '{1}' }}, position: {{ x: {2}, y: {3} }} }}", x.Key.ToLowerInvariant(), x.Key, x.Value.XCoord, x.Value.YCoord)))))
            ],
            edges: [
                @(Html.Raw(string.Join(",",
                    Model.Dependencies.SelectMany(x => x.Value.Dependents.Select(y => new KeyValuePair<string, string>(x.Key, y.Key)))
                            .Concat(Model.Dependencies.SelectMany(x => x.Value.Dependencies.Select(y => new KeyValuePair<string, string>(y.Key, x.Key))))
                    .Distinct()
                    .Select(x => string.Format("{{ data: {{ source: '{0}', target: '{1}' }}, selectable: false }}", x.Key.ToLowerInvariant(), x.Value.ToLowerInvariant())))))
            ]
        },

        ready: function () {
            window.cy = this;
            
            cy.elements().unselectify();

            cy.on('tap', 'node', function (e) {
                var node = e.cyTarget;
                var neighborhood = node.neighborhood().add(node);

                cy.elements().addClass('faded');
                neighborhood.removeClass('faded');
                neighborhood.addClass('ontop');
                node.addClass('selectednode');
            });

            cy.on('tap', function (e) {
                if (e.cyTarget === cy) {
                    cy.elements().removeClass('faded');
                    cy.elements().removeClass('ontop');
                    cy.elements().removeClass('selectednode');
                }
            });

            cy.on('mouseover', 'node', function (e) {
                var node = e.cyTarget;
                cy.elements().removeClass('mouseover');
                node.addClass('mouseover');
            });

            cy.on('cxttap', 'node', function (e) {
                var node = e.cyTarget;
                window.location.href = "@(Html.Raw(Url.Action(MVC.NuGetStats.Package("***")).Replace("***", "\" + node.data().name + \"")))";
            });

            var packageNode = cy.elements('node[id="@(Model.Id.ToLowerInvariant())"]');
            packageNode.css('background-color', 'black');
        }
    });
</script>