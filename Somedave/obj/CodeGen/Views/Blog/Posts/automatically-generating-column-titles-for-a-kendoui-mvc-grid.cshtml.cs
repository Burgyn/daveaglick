#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Somedave.Views.Blog.Posts
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using FluentBootstrap;
    using Somedave;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Blog/Posts/automatically-generating-column-titles-for-a-kendoui-mvc-grid." +
        "cshtml")]
    public partial class automatically_generating_column_titles_for_a_kendoui_mvc_grid : Somedave.BlogPostViewPage<dynamic>
    {
        public automatically_generating_column_titles_for_a_kendoui_mvc_grid()
        {
        }
        public override void Execute()
        {
            
            #line 1 "..\..\Views\Blog\Posts\automatically-generating-column-titles-for-a-kendoui-mvc-grid.cshtml"
  
    Title = "Automatically Generating Column Titles For A KendoUI MVC Grid";
    Published = new DateTime(2013, 4, 11);
    Tags = new[] { "ASPNET", "ASPNET MVC", "KendoUI", "KendoUI MVC", "grid", "data annotations" };

            
            #line default
            #line hidden
WriteLiteral(@"

<p>I love KendoUI, especially because of the available MVC wrappers. It is a very well engineered product with lots of opportunity for extension, and in this post I'll briefly discuss one that should relieve a small pain point: generating grid column titles from a <code><a");

WriteLiteral(" href=\"http://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotati" +
"ons.displayattribute.aspx\"");

WriteLiteral(">DisplayAttribute</a></code> <a");

WriteLiteral(" href=\"http://msdn.microsoft.com/en-us/library/dd901590(v=vs.95).aspx\"");

WriteLiteral(@">data annotation</a>. As you probably already know, you can change the way your UI layer presents properties of your model by applying the <code>DisplayAttribute</code> data annotation. This causes most of the UI code to use the <code>Name</code> property of the attribute when displaying that property. It looks like this:</p>

<pre><code");

WriteLiteral(" class=\"language-csharp\"");

WriteLiteral(@">[Display(Name = ""The Product!"")]
public string ProductName { get; set; }</code></pre>

<p>Until recently, KendoUI would not recognize the <code>DisplayAttribute</code> applied to a bound column. However, before I go much further, it's worth noting that this is no longer the case. I waited too long to post this article and KendoUI already gets the column title from a <code>DisplayAttribute</code> data annotation if there is one. I am posting this anyway because the technique could be generalized to other ways of customizing the grid by using an extension method.</p>

<p>Now, let's say we have a KendoUI grid declared in Razor using the MVC wrappers (this is from their demo page):</p>

<pre><code");

WriteLiteral(" class=\"language-csharp\"");

WriteLiteral(">");

WriteLiteral("@model IEnumerable&lt;Kendo.Mvc.Examples.Models.ProductViewModel&gt;\r\n\r\n");

WriteLiteral(@"@(Html.Kendo().Grid(Model)    
    .Name(""Grid"")
    .Columns(columns =&gt;
    {
        columns.Bound(p =&gt; p.ProductID);
        columns.Bound(p =&gt; p.ProductName);
    })
    .DataSource(dataSource =&gt; dataSource
        .Ajax().Read(read =&gt; read.Action(""Products_Read"", ""Grid""))
    )
)</code></pre>

<p>When displaying the column titles, KendoUI will use the name of the property to generate the name of the column. In the example above, you will get two columns named ""Product ID"" and ""Product Name"" (Kendo is smart enough to add the spaces in between the capital letters). But what if we wanted our second column to be named ""The Product!"" as in the example application of <code>DisplayAttribute</code> above? We could add the title explicitly using the <code>Title()</code> extension method:</p>

<pre><code");

WriteLiteral(" class=\"language-csharp\"");

WriteLiteral(">...\r\ncolumns.Bound(p =&gt; p.ProductName).Title(\"The Product!\");\r\n...</code></pr" +
"e>\r\n\r\n<p>But this violates the <a");

WriteLiteral(" href=\"http://en.wikipedia.org/wiki/Don\'t_repeat_yourself\"");

WriteLiteral(">DRY principle</a>. If you want to change the title in the future, you\'ll need to" +
" remember to change it in both places. What would be better is if we could write" +
" something like:</p>\r\n\r\n<pre><code");

WriteLiteral(" class=\"language-csharp\"");

WriteLiteral(@">...
columns.Bound(p =&gt; p.ProductName).DisplayNameTitle();
...</code></pre>

<p>This would indicate to the grid that the title should be set by getting a <code>DisplayAttribute</code> <code>Name</code> property (if there is one) and using the normal name generation otherwise. The code for such an extension method is below:</p>

<pre><code");

WriteLiteral(" class=\"language-csharp\"");

WriteLiteral(">public static GridBoundColumnBuilder&lt;TModel&gt; DisplayNameTitle&lt;TModel&gt" +
";(\r\n    this GridBoundColumnBuilder&lt;TModel&gt; builder) where TModel : class," +
" new()\r\n{\r\n    // Create an adapter to access the typed grid column\r\n    // (whi" +
"ch contains the Expression)\r\n    Type adapterType = typeof(GridBoundColumnAdapte" +
"r&lt;,&gt;)\r\n        .MakeGenericType(typeof(TModel), builder.Column.MemberType)" +
";\r\n    IGridBoundColumnAdapter adapter =\r\n        (IGridBoundColumnAdapter)Activ" +
"ator.CreateInstance(adapterType);\r\n\r\n    // Use the adapter to get the title and" +
" set it\r\n    return builder.Title(adapter.GetDisplayName(builder.Column));\r\n}\r\n\r" +
"\nprivate interface IGridBoundColumnAdapter\r\n{\r\n    string GetDisplayName(IGridBo" +
"undColumn column);\r\n}\r\n\r\nprivate class GridBoundColumnAdapter&lt;TModel, TValue&" +
"gt;\r\n    : IGridBoundColumnAdapter where TModel : class, new()\r\n{\r\n    public st" +
"ring GetDisplayName(IGridBoundColumn column)\r\n    {\r\n        // Get the typed bo" +
"und column\r\n        GridBoundColumn&lt;TModel, TValue&gt; boundColumn =\r\n       " +
"     column as GridBoundColumn&lt;TModel, TValue&gt;;\r\n        if (boundColumn =" +
"= null) return String.Empty;\r\n\r\n        // Create the appropriate HtmlHelper and" +
" use it to get the display name\r\n        HtmlHelper&lt;TModel&gt; helper = HtmlH" +
"elpers.For&lt;TModel&gt;(\r\n            boundColumn.Grid.ViewContext,\r\n          " +
"  boundColumn.Grid.ViewData,\r\n            new RouteCollection());\r\n        retur" +
"n helper.DisplayNameFor(boundColumn.Expression).ToString();\r\n    }\r\n}</code></pr" +
"e>\r\n\r\n<p>So let\'s look at this code a little more closely. The first <code>Displ" +
"ayNameTitle&lt;TModel&gt;()</code> method is the actual extension. It takes a <c" +
"ode>GridBoundColumnBuilder&lt;TModel&gt;</code> because that\'s what the <code>Bo" +
"und()</code> method returns as part of the KendoUI MVC fluent interface for colu" +
"mn specifications. The <code>DisplayNameTitle</code> extension method creates an" +
" instance of an adapter class that can be used to manipulate the grid column. Be" +
"cause the KendoUI MVC classes are strongly typed, we need to use reflection to c" +
"reate an adapter with the proper generic type parameters. The key to this workin" +
"g is that the adapter class implements the non-generic <code>IGridBoundColumnAda" +
"pter</code> interface, which means that by casting the reflection-generated gene" +
"ric adapter class to the interface we can call non-generic methods that have acc" +
"ess to the generic type parameters we used during the reflected construction in " +
"the actual implementation of the method.</p>\r\n\r\n<p>The real work gets done insid" +
"e the <code>GetDisplayName()</code> implementation. This method ");

            
            #line 84 "..\..\Views\Blog\Posts\automatically-generating-column-titles-for-a-kendoui-mvc-grid.cshtml"
                                                                                           Write(Html.Post("creates an appropriately typed HtmlHelper", x => x.getting_an_htmlhelper_for_an_alternate_model_type));

            
            #line default
            #line hidden
WriteLiteral(@" and then uses it to call the <code>HtmlHelper.DisplayNameFor()</code> extension method. This ensures that our own <code>DisplayNameTitle()</code> extension will always return the exact same title that would be returned if we used the normal MVC <code>HtmlHelper</code> methods to display the property.</p>

<p>This technique could be used to add other extensions to the KendoUI column building fluent interface as well. For example, you could automatically make a column sortable or not based on the data type.</p>
");

        }
    }
}
#pragma warning restore 1591
