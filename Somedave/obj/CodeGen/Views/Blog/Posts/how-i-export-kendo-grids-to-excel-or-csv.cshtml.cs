#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Somedave.Views.Blog.Posts
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using FluentBootstrap;
    using Somedave;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Blog/Posts/how-i-export-kendo-grids-to-excel-or-csv.cshtml")]
    public partial class how_i_export_kendo_grids_to_excel_or_csv : Somedave.BlogPostViewPage<dynamic>
    {
        public how_i_export_kendo_grids_to_excel_or_csv()
        {
        }
        public override void Execute()
        {
            
            #line 1 "..\..\Views\Blog\Posts\how-i-export-kendo-grids-to-excel-or-csv.cshtml"
  
    Title = "How I Export Kendo Grids to Excel (or CSV)";
    Published = new DateTime(2014, 3, 6);
    Tags = new[] { "ASPNET", "ASPNET MVC", "KendoUI", "KendoUI MVC", "grid", "export", "CSV", "Excel" };

            
            #line default
            #line hidden
WriteLiteral(@"

<p>Exporting grid data is a common need for line-of-business applications. Once you’ve got all the great data presented, filtered, etc. how to you allow the user to download it and continue playing with it? There are many approaches discussed online to solve this (see <a");

WriteLiteral(" href=\"http://blogs.telerik.com/kendoui/posts/13-03-12/exporting_the_kendo_ui_gri" +
"d_data_to_excel\"");

WriteLiteral(">here</a> and <a");

WriteLiteral(" href=\"http://stackoverflow.com/questions/14472802/by-using-kendo-how-to-export-t" +
"he-grid-data-to-any-one-of-the-following-files-cs\"");

WriteLiteral(">here</a>). Unfortunately, I didn’t find any of them really had the polish I want" +
"ed and that my users demand. There are really two categories of solutions to thi" +
"s problem:</p>\r\n\r\n<h1>Server-Side</h1>\r\n\r\n<p>This approach relies on interceptin" +
"g or otherwise taking the output of the method that generates the data for the g" +
"rid and formatting it for download by the user. There are a couple of problems w" +
"ith this technique. The first is that the data you return to the grid may not be" +
" suitable for the user. It may have aggregate data, piecemeal data, etc. You als" +
"o loose any heading information you’ve added to the grid. Sure, you could use so" +
"mething like .NET reflection to get the name of properties, but that’s not the s" +
"ame thing as headers. Especially since the Kendo grid (when used through the Ken" +
"do MVC library) automatically splits and/or uses data annotations for the header" +
" text. You also loose any filtering, sorting, etc. unless you also capture the s" +
"tate of the grid options which can be tricky to get right. In general, I think i" +
"t comes down to the server-side data that the grid uses isn’t the same thing as " +
"what’s presented to the user. And if you’re going to return a CSV or Excel file " +
"that doesn’t match what they’re looking at on the screen then you’re going to ca" +
"use confusion.</p>\r\n\r\n<h1>Client-Side</h1>\r\n\r\n<p>The other kind of approach is t" +
"o get the data on the client. I like this approach better because it has the pot" +
"ential to exactly match what the user sees on their screen. I found the followin" +
"g <a");

WriteLiteral(" href=\"https://github.com/uber-rob/kendo-grid-csv-download\"");

WriteLiteral(">source on GitHub</a>, which itself is based on the work in this <a");

WriteLiteral(" href=\"http://www.telerik.com/forums/export-to-csv\"");

WriteLiteral(@">forum thread</a>. The goal of this code is to trigger downloading and formatting of the data by the grid itself after the user has manipulated it and then package that data into a file for download. In other words, use the grid as a proxy so that the data you use for the file matches exactly what the user sees. While I think the approach is sound, I found many problems with the code itself. For example, it didn’t wait for the grid data source to complete fetching data, thus often returning stale data to the user. It also lacked support for things like stripping out HTML (which I use in grids a lot for embedded links). My modified version looks like this:</p>

<pre><code");

WriteLiteral(" class=\"language-javascript\"");

WriteLiteral(">// Modified from https://github.com/uber-rob/kendo-grid-csv-download\r\nfunction k" +
"endoGridToCSV(grid) {\r\n\r\n    // Get access to basic grid data\r\n    var datasourc" +
"e = grid.dataSource;\r\n    var originalPageSize = datasource.pageSize();\r\n    var" +
" originalPage = datasource.page();\r\n\r\n    // Remove the success function since w" +
"e don\'t care about what happens after we get the data\r\n    // (and the prototype" +
" success function causes problems when we copy the datasource over from the grid" +
")\r\n    datasource.success = function (data) {\r\n        var csv = \'\';\r\n\r\n        " +
"// Add the header row\r\n        for (var i = 0; i &lt; grid.columns.length; i++) " +
"{\r\n            var title = grid.columns[i].title,\r\n                field = grid." +
"columns[i].field;\r\n            if (typeof (field) === \"undefined\") { continue; /" +
"* no data! */ }\r\n            if (typeof (title) === \"undefined\") { title = field" +
" }\r\n\r\n            title = title.replace(/\"/g, \'\"\"\');\r\n            csv += \'\"\' + t" +
"itle + \'\"\';\r\n            if (i &lt; grid.columns.length - 1) {\r\n                " +
"csv += \",\";\r\n            }\r\n        }\r\n        csv += \"\\n\";\r\n\r\n        // Add ea" +
"ch row of data\r\n        $.each(data.Data, function (index, row) {\r\n            /" +
"/ Do a first pass to parse any dates (may eventually need to parse other types o" +
"f received values here)\r\n            for (var i = 0; i &lt; grid.columns.length;" +
" i++) {\r\n                var fieldName = grid.columns[i].field;\r\n               " +
" if (typeof (fieldName) === \"undefined\") { continue; }\r\n                if (type" +
"of row[fieldName] == \"string\" &amp;&amp; row[fieldName].lastIndexOf(\"/Date(\", 0)" +
" === 0) {\r\n                    row[fieldName] = kendo.parseDate(row[fieldName]);" +
"\r\n                }\r\n            }\r\n\r\n            // Now generate the actual val" +
"ues\r\n            for (var i = 0; i &lt; grid.columns.length; i++) {\r\n           " +
"     var fieldName = grid.columns[i].field;\r\n                if (typeof (fieldNa" +
"me) === \"undefined\") { continue; }\r\n\r\n                // Get the template and us" +
"e it to get the display value\r\n                var tmpl = grid._cellTmpl(grid.co" +
"lumns[i], {});\r\n                var kt = kendo.template(tmpl);\r\n                " +
"value = kt(row);\r\n\r\n                // Strip any HTML (needs to be inclosed in a" +
"n outer tag to work)\r\n                // Also strip any elements with the \'no-ex" +
"port\' class\r\n                // Also remove any label elements since they get us" +
"ed often in links\r\n                var html = $(\'&lt;div&gt;\' + value + \'&lt;/di" +
"v&gt;\');\r\n                html.find(\'.label\').remove();\r\n                html.fi" +
"nd(\'.no-export\').remove();\r\n                value = html.text().trim();\r\n\r\n     " +
"           // Format for CSV (escape quotes and add the comma)\r\n                " +
"value = value.replace(/\"/g, \'\"\"\');\r\n                csv += \'\"\' + value + \'\"\';\r\n " +
"               if (i &lt; grid.columns.length - 1) {\r\n                    csv +=" +
" \",\";\r\n                }\r\n            }\r\n            csv += \"\\n\";\r\n        });\r\n" +
"\r\n        // Send the CSV content back to the server to generate a download link" +
"\r\n        postToURL(\"/CsvToExcel\", { data: csv });\r\n\r\n        // Reset back to o" +
"riginal values and reset the datasource\r\n        datasource.pageSize(originalPag" +
"eSize);\r\n        datasource.page(originalPage);\r\n        delete datasource.succe" +
"ss;   \r\n\r\n        // Reset the datasource now that we\'re done\r\n        datasourc" +
"e._dequeueRequest();\r\n        datasource.view();\r\n        kendo.ui.progress(grid" +
".element, false);\r\n    }\r\n\r\n    // Increase page size to cover all the data and " +
"then trigger fetching and processing of all the data\r\n    datasource.pageSize(da" +
"tasource.total());\r\n    datasource.view();\r\n}</code></pre>\r\n\r\n<p>The one problem" +
" with this code is that it creates the data on the client. “But that’s great!” y" +
"ou say, “The client won’t have to download anything extra!” you say. Unfortunate" +
"ly there’s actually no good cross-browser way to get a blob of data into a “file" +
"” that the client presents for download to the user. As suggested by the origina" +
"l authors, there is a library called <a");

WriteLiteral(" href=\"https://github.com/dcneiner/Downloadify\"");

WriteLiteral(@">Downloadify</a> that can solve this using JavaScript and Flash. If that works for you, great! However, I’m not a fan of Flash and can’t rely on it being available in my user’s environment so I needed a workaround.</p>

<h2>Downloading The File</h2>

<p>The first challenge is getting the data to the user. I found this JavaScript method that can be used to post arbitrary content to a server (we can’t use the jQuery AJAX post method because we need this to be an actual post request so the prompt to save the resulting file is presented):</p>

<pre><code");

WriteLiteral(" class=\"language-javascript\"");

WriteLiteral(">// This posts specific data to a given URL\r\n// From http://stackoverflow.com/que" +
"stions/133925/javascript-post-request-like-a-form-submit\r\nfunction postToURL(url" +
", values) {\r\n    var form = $(\'&lt;form id=\"postToURL\"&gt;&lt;/form&gt;\');\r\n\r\n  " +
"  form.attr(\"method\", \"post\");\r\n    form.attr(\"action\", url);\r\n\r\n    $.each(valu" +
"es, function (key, value) {\r\n        var field = $(\'&lt;input&gt;&lt;/input&gt;\'" +
");\r\n\r\n        field.attr(\"type\", \"hidden\");\r\n        field.attr(\"name\", key);\r\n " +
"       field.attr(\"value\", value);\r\n\r\n        form.append(field);\r\n    });\r\n\r\n  " +
"  // The form needs to be a part of the document in\r\n    // order for us to be a" +
"ble to submit it.\r\n    $(document.body).append(form);\r\n    form.submit();\r\n    $" +
"(\"#postToURL\").remove();\r\n}</code></pre>\r\n\r\n<p>You’ll notice it’s called from in" +
"side the function that converts the grid to CSV data. That solves the client-sid" +
"e part of the equation. Yes, I know what you’re thinking. Isn’t it inefficient t" +
"o have the client get the data from the server, format it, and then send it righ" +
"t back to the server, only to have it sent BACK to the client as a file? Well, y" +
"es, yes it is. In my situation though, the performance hit was acceptable in ord" +
"er to achieve the best user interaction. That’s aided by the fact that the user " +
"clicked a button to make this happen. If a user takes an action that they know m" +
"ight be long-running, their a lot more likely to forgive a little wait time.</p>" +
"\r\n\r\n<p>On the server I have an action called <code>CsvToExcel</code>. However, b" +
"efore I show you that, here’s an alternate action that would have just packaged " +
"up the CSV and returned it as a file:</p>\r\n\r\n<pre><code");

WriteLiteral(" class=\"language-csharp\"");

WriteLiteral(@">[POST(""MakeFile"")]
[ValidateInput(false)]
public virtual ActionResult MakeFile(string fileName, string contentType, string data)
{
    if (string.IsNullOrWhiteSpace(fileName) || string.IsNullOrWhiteSpace(contentType) || string.IsNullOrWhiteSpace(data))
        return HttpNotFound();
    return File(Encoding.UTF8.GetBytes(data), contentType, fileName);
}</code></pre>

<p>Now my actual action uses <a");

WriteLiteral(" href=\"http://www.aspose.com/.net/excel-component.aspx\"");

WriteLiteral(">Aspose Cells</a> to create an Excel file with headings, frozen panes, etc. but y" +
"ou could make do with other free alternatives mentioned in the linked articles a" +
"t the beginning of this post. Here is my real action:</p>\r\n\r\n<pre><code");

WriteLiteral(" class=\"language-csharp\"");

WriteLiteral(">[POST(\"CsvToExcel\")]\r\n[ValidateInput(false)]\r\npublic virtual ActionResult CsvToE" +
"xcel(string data)\r\n{\r\n    if (string.IsNullOrWhiteSpace(data))\r\n        return H" +
"ttpNotFound();\r\n\r\n    // Create a workbook from the CSV data\r\n    Workbook workb" +
"ook;\r\n    using(MemoryStream inputStream = new MemoryStream(Encoding.UTF8.GetByt" +
"es(data)))\r\n    {\r\n        workbook = new Workbook(inputStream, new LoadOptions(" +
"LoadFormat.CSV));\r\n    }\r\n    Worksheet worksheet = workbook.Worksheets[0];\r\n\r\n " +
"   // Make the heading row bold\r\n    Style boldStyle = workbook.Styles[workbook." +
"Styles.Add()];\r\n    boldStyle.Font.IsBold = true;\r\n    worksheet.Cells.Rows[0].A" +
"pplyStyle(boldStyle, new StyleFlag() { FontBold = true });\r\n\r\n    // Freeze, aut" +
"ofit, and activate autofilter for the heading row\r\n    worksheet.FreezePanes(1, " +
"0, 1, 0);\r\n    worksheet.AutoFitColumns();\r\n    int letterIndex = worksheet.Cell" +
"s.MaxDataColumn + 65;\r\n    char letter = letterIndex &gt; 90 ? \'Z\' : (char)lette" +
"rIndex;\r\n    worksheet.AutoFilter.Range = \"A1:\" + letter + \"1\";\r\n\r\n    // Return" +
" the file\r\n    byte[] output;\r\n    using (MemoryStream outputStream = new Memory" +
"Stream())\r\n    {\r\n        workbook.Save(outputStream, SaveFormat.Xlsx);\r\n       " +
" outputStream.Seek(0, SeekOrigin.Begin);\r\n        output = outputStream.ToArray(" +
");\r\n    }\r\n    return File(output, \"application/vnd.openxmlformats-officedocumen" +
"t.spreadsheetml.sheet\", \"grid.xlsx\");\r\n}</code></pre>\r\n\r\n<h2>Rigging It Up</h2>\r" +
"\n\r\n<p>The last part is rigging this all up to an actual grid. I wanted it to be " +
"as easy as possible to add this capability to any arbitrary grid. To that end, I" +
" create an extension method for the Kendo MVC wrappers that lets me add an “Expo" +
"rt” button the exact same way you add a “Create” button to the grid toolbar. Her" +
"e’s the extension:</p>\r\n\r\n<pre><code");

WriteLiteral(" class=\"language-csharp\"");

WriteLiteral(">public static GridToolBarCustomCommandBuilder&lt;TModel&gt; Export&lt;TModel&gt;" +
"(this GridToolBarCommandFactory&lt;TModel&gt; factory)\r\n    where TModel : class" +
", new()\r\n{\r\n    return factory.Custom().Text(\"Export\").HtmlAttributes(new { ");

WriteLiteral("@class = \"export-grid\" });\r\n}</code></pre>\r\n\r\n<p>And here’s the small bit a JavaS" +
"cript that supports it (essentially rigging up a jQuery click handler for the ne" +
"w button to the <code>kendoGridToCSV</code> function mentioned earlier:</p>\r\n\r\n<" +
"pre><code");

WriteLiteral(" class=\"language-javascript\"");

WriteLiteral(@">// This rigs up the export button on the grid
$("".export-grid"").click(function (e) {
    e.preventDefault();
    var grid = $(e.target).parents('.k-grid').data(""kendoGrid"");
    kendoGridToCSV(grid);
});</code></pre>

<p>Finally, here’s how to use it on your grid:</p>

<pre><code");

WriteLiteral(" class=\"language-csharp\"");

WriteLiteral(">");

WriteLiteral("@(Html.Kendo().Grid(...).Name(\"...\")\r\n    ...\r\n    .ToolBar(x =&gt; x.Export())\r\n" +
"    ...\r\n)</code></pre>\r\n\r\n<p>Easy, right? I hope this was helpful – it took me " +
"a while to work through all the bits and hopefully it will save you some time.</" +
"p>");

        }
    }
}
#pragma warning restore 1591
