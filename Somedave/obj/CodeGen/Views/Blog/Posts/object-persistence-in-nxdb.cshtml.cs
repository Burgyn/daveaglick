#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Somedave.Views.Blog.Posts
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using FluentBootstrap;
    using Somedave;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Blog/Posts/object-persistence-in-nxdb.cshtml")]
    public partial class object_persistence_in_nxdb : Somedave.BlogPostViewPage<dynamic>
    {
        public object_persistence_in_nxdb()
        {
        }
        public override void Execute()
        {
            
            #line 1 "..\..\Views\Blog\Posts\object-persistence-in-nxdb.cshtml"
  
    Title = "Object Persistence In Nxdb";
    Published = new DateTime(2012, 3, 26);
    Tags = new[] { "Nxdb", "XML", "database", "persistence", "object persistence" };

            
            #line default
            #line hidden
WriteLiteral(@"

<p>The most recent version of Nxdb includes a complete object persistence framework and this post explains some of the motivation behind it and provides some insight into how it was implemented.</p>

<h1>What Is A Persistence Framework?</h1>

<p><a");

WriteLiteral(" href=\"http://en.wikipedia.org/wiki/Persistence_framework\"");

WriteLiteral(">Wikipedia</a> sums it up nicely by saying \"a persistence framework is middleware" +
" that assists and automates the storage of program data into databases.\" More to" +
" the point, a persistence framework allows the state of object instances to be s" +
"tored externally (usually, but not necessarily, in a database) and recalled at a" +
" later time (such as a future program execution). The \"state\" of an object could" +
" be everything that is necessary to fully represent the object (such as all of i" +
"t\'s fields), or it could be some important subset of object data.</p>\r\n\r\n<p>Pers" +
"istence frameworks are related to, but not the same, as object-relational mapper" +
" (ORM) tools. A persistence framework usually manages the conversion of an objec" +
"t to some format the external storage medium can understand, the storage of that" +
" data into the external medium, the fetching of data from the external medium, a" +
"nd the instantiation and population of instances based on that data. The problem" +
" with persistence frameworks when they use a relational database (or other highl" +
"y structured storage) is that the database needs to know something about the obj" +
"ects being stored so that tables, columns, etc. can be created to support them. " +
"ORM tools assist with this process by mapping the data to be stored (I.e., the o" +
"bject) to the storage medium (I.e., the database). They often automate the proce" +
"ss of creating appropriate tables and columns, managing foreign keys, etc. An OR" +
"M is only needed when the storage medium cannot natively support the type or str" +
"ucture of data needing to be stored.</p>\r\n\r\n<h1>Why Create A New Persistence Fra" +
"mework?</h1>\r\n\r\n<p>In general, I wouldn\'t really recommend rolling your own pers" +
"istence framework. There are so many good ones out there (including <a");

WriteLiteral(" href=\"http://nhforge.org\"");

WriteLiteral(">NHibernate</a>, <a");

WriteLiteral(" href=\"http://subsonicproject.com/\"");

WriteLiteral(">SubSonic</a>, and <a");

WriteLiteral(" href=\"http://www.mybatis.org/\"");

WriteLiteral(@">mybatis</a>) and it is doubtful you'll be able to improve on them enough to make the exercise worthwhile. So why ignore this advice and build a new one for Nxdb? The answer is that almost all of the existing persistence framework are based on SQL, talk to SQL databases, and either use or have built-in ORM capabilities. XML is a completely different storage medium, one that is able to better represent the hierarchical nature of object-oriented classes. While a couple of .NET XML persistence frameworks do exist (such as <a");

WriteLiteral(" href=\"http://proetus.codeplex.com/\"");

WriteLiteral(">Proetus</a>) and several articles have been written at <a");

WriteLiteral(" href=\"http://www.codeproject.com/search.aspx?q=.net+xml+persistence&amp;sbo=kw\"");

WriteLiteral(@">CodeProject</a> and elsewhere on how to write XML persistence capabilities, they tend to be somewhat conceptual and abstract the storage layer by producing XML that becomes the developer's responsibility to store and retrieve. We saw an opportunity to unlock the potential of a native XML persistence layer by having it be tied directly to an XML database. This allows automation of the storage and retrieval of objects and opens up the door for interesting use cases such as querying the object graph using XQuery.</p>

<h1>Requirements</h1>

<p>When we started thinking about an XML persistence layer for Nxdb we considered what the most important requirements should be and narrowed them down to a few key ones:</p>

");

            
            #line 23 "..\..\Views\Blog\Posts\object-persistence-in-nxdb.cshtml"
 using (var list = Bootstrap.List(FluentBootstrap.Typography.ListType.Unordered).AddCss("p"))
{
	
            
            #line default
            #line hidden
            
            #line 25 "..\..\Views\Blog\Posts\object-persistence-in-nxdb.cshtml"
Write(list.ListItem("The framework should be able to serialize objects in a variety of ways to support many different environments and uses."));

            
            #line default
            #line hidden
            
            #line 25 "..\..\Views\Blog\Posts\object-persistence-in-nxdb.cshtml"
                                                                                                                                          
	
            
            #line default
            #line hidden
            
            #line 26 "..\..\Views\Blog\Posts\object-persistence-in-nxdb.cshtml"
Write(list.ListItem("The framework should automate the process of storing and fetching objects as much as possible."));

            
            #line default
            #line hidden
            
            #line 26 "..\..\Views\Blog\Posts\object-persistence-in-nxdb.cshtml"
                                                                                                                 
	
            
            #line default
            #line hidden
            
            #line 27 "..\..\Views\Blog\Posts\object-persistence-in-nxdb.cshtml"
Write(list.ListItem("The framework should require as small a change as possible to existing objects to make them compatible."));

            
            #line default
            #line hidden
            
            #line 27 "..\..\Views\Blog\Posts\object-persistence-in-nxdb.cshtml"
                                                                                                                          
	
            
            #line default
            #line hidden
            
            #line 28 "..\..\Views\Blog\Posts\object-persistence-in-nxdb.cshtml"
Write(list.ListItem("The framework should be extensible, allowing developers to modify or enhance any aspect of the design."));

            
            #line default
            #line hidden
            
            #line 28 "..\..\Views\Blog\Posts\object-persistence-in-nxdb.cshtml"
                                                                                                                         
}

            
            #line default
            #line hidden
WriteLiteral(@"
<h1>Overall Design</h1>

<p>The main entry point for the persistence framework is the Manager class. All objects are initially persisted or retrieved through one of it's methods. Objects can be <em>attached</em> to the manager, which means that they are stored in a cache and the manager will return a reference to the same instance of the object if the same XML content is used. Additionally, attached objects can be automatically updated when the database changes, making the objects more of a programmatic representation of the database rather than the database simply serving as a backing store. Each object is persisted to and from the database using a Persister. The persister is primarily responsible for determining what parts of an object should be stored in the database, how those parts should be represented (for example as XML elements or attributes), and performing the actual serialization and deserialization of an object. There are several persisters including one that supports the native .NET XmlSerializer, one that provides a great deal of control through the use of attributes on class members, and one that allows completely custom behavior through the implementation of an interface. Should additional techniques be required, a new persister is easy to create and implement. Overall, the architecture and process by which objects are stored to the database and fetched from the database is presented below.</p>

");

            
            #line 35 "..\..\Views\Blog\Posts\object-persistence-in-nxdb.cshtml"
Write(Bootstrap.Image(Links.Content.posts.persistenceprocess1_png).Responsive());

            
            #line default
            #line hidden
WriteLiteral("\r\n");

        }
    }
}
#pragma warning restore 1591
