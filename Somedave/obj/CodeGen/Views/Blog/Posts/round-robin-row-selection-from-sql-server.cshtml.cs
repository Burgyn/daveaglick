#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Somedave.Views.Blog.Posts
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using FluentBootstrap;
    using Somedave;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Views/Blog/Posts/round-robin-row-selection-from-sql-server.cshtml")]
    public partial class round_robin_row_selection_from_sql_server : Somedave.BlogPostViewPage<dynamic>
    {
        public round_robin_row_selection_from_sql_server()
        {
        }
        public override void Execute()
        {
            
            #line 1 "..\..\Views\Blog\Posts\round-robin-row-selection-from-sql-server.cshtml"
  
    Title = "Round Robin Row Selection From SQL Server";
    Published = new DateTime(2013, 5, 17);
    Tags = new[] { "SQL", "SQL Server", "round robin" };

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n<p>I\'ve been trying to answer at least one question a day on Stack Overflow r" +
"ecently, and <a");

WriteLiteral(" href=\"http://stackoverflow.com/questions/16595598/how-to-maintain-a-round-robin-" +
"approach\"");

WriteLiteral(@">one came up yesterday</a> that I thought was a pretty good little SQL problem: how can you efficiently select one row from a database in a ""round robin"" fashion? That is, how can you make sure the selections are evenly distributed? Turns out this can be accomplished with a single SQL query on SQL 2005 and newer using the <code><a");

WriteLiteral(" href=\"http://msdn.microsoft.com/en-us/library/ms177564(v=sql.90).aspx\"");

WriteLiteral(@">OUTPUT</a></code> clause. Assuming the table has an ""Id"" primary key and a ""LastSelected"" DateTime column, the following SQL query will select the record that hasn't been selected in the longest time (or pick an arbitrary one if there is a tie), update the last time that record was selected, and then return all columns for the record.</p>

<pre><code");

WriteLiteral(" class=\"language-sql\"");

WriteLiteral(">UPDATE MyTable\r\nSET LastSelected = GetDate()\r\nOUTPUT INSERTED.*\r\nWHERE Id = (SEL" +
"ECT TOP (1) Id FROM MyTable ORDER BY LastSelected)</code></pre>\r\n");

        }
    }
}
#pragma warning restore 1591
